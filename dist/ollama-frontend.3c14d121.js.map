{"mappings":"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","sources":["node_modules/@parcel/runtime-browser-hmr/lib/runtime-4299f6b0b26fed39.js","script.js","node_modules/marked/lib/marked.umd.js","node_modules/marked/src/defaults.ts","node_modules/marked/src/rules.ts","node_modules/marked/src/helpers.ts","node_modules/marked/src/Tokenizer.ts","node_modules/marked/src/Lexer.ts","node_modules/marked/src/Renderer.ts","node_modules/marked/src/TextRenderer.ts","node_modules/marked/src/Parser.ts","node_modules/marked/src/Hooks.ts","node_modules/marked/src/Instance.ts","node_modules/marked/src/marked.ts"],"sourcesContent":["var HMR_HOST = null;var HMR_PORT = null;var HMR_SERVER_PORT = 1234;var HMR_SECURE = false;var HMR_ENV_HASH = \"439701173a9199ea\";var HMR_USE_SSE = false;module.bundle.HMR_BUNDLE_ID = \"5e0263af3c14d121\";\"use strict\";\n\n/* global HMR_HOST, HMR_PORT, HMR_SERVER_PORT, HMR_ENV_HASH, HMR_SECURE, HMR_USE_SSE, chrome, browser, __parcel__import__, __parcel__importScripts__, ServiceWorkerGlobalScope */\n/*::\nimport type {\n  HMRAsset,\n  HMRMessage,\n} from '@parcel/reporter-dev-server/src/HMRServer.js';\ninterface ParcelRequire {\n  (string): mixed;\n  cache: {|[string]: ParcelModule|};\n  hotData: {|[string]: mixed|};\n  Module: any;\n  parent: ?ParcelRequire;\n  isParcelRequire: true;\n  modules: {|[string]: [Function, {|[string]: string|}]|};\n  HMR_BUNDLE_ID: string;\n  root: ParcelRequire;\n}\ninterface ParcelModule {\n  hot: {|\n    data: mixed,\n    accept(cb: (Function) => void): void,\n    dispose(cb: (mixed) => void): void,\n    // accept(deps: Array<string> | string, cb: (Function) => void): void,\n    // decline(): void,\n    _acceptCallbacks: Array<(Function) => void>,\n    _disposeCallbacks: Array<(mixed) => void>,\n  |};\n}\ninterface ExtensionContext {\n  runtime: {|\n    reload(): void,\n    getURL(url: string): string;\n    getManifest(): {manifest_version: number, ...};\n  |};\n}\ndeclare var module: {bundle: ParcelRequire, ...};\ndeclare var HMR_HOST: string;\ndeclare var HMR_PORT: string;\ndeclare var HMR_SERVER_PORT: string;\ndeclare var HMR_ENV_HASH: string;\ndeclare var HMR_SECURE: boolean;\ndeclare var HMR_USE_SSE: boolean;\ndeclare var chrome: ExtensionContext;\ndeclare var browser: ExtensionContext;\ndeclare var __parcel__import__: (string) => Promise<void>;\ndeclare var __parcel__importScripts__: (string) => Promise<void>;\ndeclare var globalThis: typeof self;\ndeclare var ServiceWorkerGlobalScope: Object;\n*/\nvar OVERLAY_ID = '__parcel__error__overlay__';\nvar OldModule = module.bundle.Module;\nfunction Module(moduleName) {\n  OldModule.call(this, moduleName);\n  this.hot = {\n    data: module.bundle.hotData[moduleName],\n    _acceptCallbacks: [],\n    _disposeCallbacks: [],\n    accept: function (fn) {\n      this._acceptCallbacks.push(fn || function () {});\n    },\n    dispose: function (fn) {\n      this._disposeCallbacks.push(fn);\n    }\n  };\n  module.bundle.hotData[moduleName] = undefined;\n}\nmodule.bundle.Module = Module;\nmodule.bundle.hotData = {};\nvar checkedAssets /*: {|[string]: boolean|} */,\n  disposedAssets /*: {|[string]: boolean|} */,\n  assetsToDispose /*: Array<[ParcelRequire, string]> */,\n  assetsToAccept /*: Array<[ParcelRequire, string]> */,\n  bundleNotFound = false;\nfunction getHostname() {\n  return HMR_HOST || (typeof location !== 'undefined' && location.protocol.indexOf('http') === 0 ? location.hostname : 'localhost');\n}\nfunction getPort() {\n  return HMR_PORT || (typeof location !== 'undefined' ? location.port : HMR_SERVER_PORT);\n}\n\n// eslint-disable-next-line no-redeclare\nlet WebSocket = globalThis.WebSocket;\nif (!WebSocket && typeof module.bundle.root === 'function') {\n  try {\n    // eslint-disable-next-line no-global-assign\n    WebSocket = module.bundle.root('ws');\n  } catch {\n    // ignore.\n  }\n}\nvar hostname = getHostname();\nvar port = getPort();\nvar protocol = HMR_SECURE || typeof location !== 'undefined' && location.protocol === 'https:' && !['localhost', '127.0.0.1', '0.0.0.0'].includes(hostname) ? 'wss' : 'ws';\n\n// eslint-disable-next-line no-redeclare\nvar parent = module.bundle.parent;\nif (!parent || !parent.isParcelRequire) {\n  // Web extension context\n  var extCtx = typeof browser === 'undefined' ? typeof chrome === 'undefined' ? null : chrome : browser;\n\n  // Safari doesn't support sourceURL in error stacks.\n  // eval may also be disabled via CSP, so do a quick check.\n  var supportsSourceURL = false;\n  try {\n    (0, eval)('throw new Error(\"test\"); //# sourceURL=test.js');\n  } catch (err) {\n    supportsSourceURL = err.stack.includes('test.js');\n  }\n  var ws;\n  if (HMR_USE_SSE) {\n    ws = new EventSource('/__parcel_hmr');\n  } else {\n    try {\n      // If we're running in the dev server's node runner, listen for messages on the parent port.\n      let {\n        workerData,\n        parentPort\n      } = module.bundle.root('node:worker_threads') /*: any*/;\n      if (workerData !== null && workerData !== void 0 && workerData.__parcel) {\n        parentPort.on('message', async message => {\n          try {\n            await handleMessage(message);\n            parentPort.postMessage('updated');\n          } catch {\n            parentPort.postMessage('restart');\n          }\n        });\n\n        // After the bundle has finished running, notify the dev server that the HMR update is complete.\n        queueMicrotask(() => parentPort.postMessage('ready'));\n      }\n    } catch {\n      if (typeof WebSocket !== 'undefined') {\n        try {\n          ws = new WebSocket(protocol + '://' + hostname + (port ? ':' + port : '') + '/');\n        } catch (err) {\n          // Ignore cloudflare workers error.\n          if (err.message && !err.message.includes('Disallowed operation called within global scope')) {\n            console.error(err.message);\n          }\n        }\n      }\n    }\n  }\n  if (ws) {\n    // $FlowFixMe\n    ws.onmessage = async function (event /*: {data: string, ...} */) {\n      var data /*: HMRMessage */ = JSON.parse(event.data);\n      await handleMessage(data);\n    };\n    if (ws instanceof WebSocket) {\n      ws.onerror = function (e) {\n        if (e.message) {\n          console.error(e.message);\n        }\n      };\n      ws.onclose = function () {\n        console.warn('[parcel] 🚨 Connection to the HMR server was lost');\n      };\n    }\n  }\n}\nasync function handleMessage(data /*: HMRMessage */) {\n  checkedAssets = {} /*: {|[string]: boolean|} */;\n  disposedAssets = {} /*: {|[string]: boolean|} */;\n  assetsToAccept = [];\n  assetsToDispose = [];\n  bundleNotFound = false;\n  if (data.type === 'reload') {\n    fullReload();\n  } else if (data.type === 'update') {\n    // Remove error overlay if there is one\n    if (typeof document !== 'undefined') {\n      removeErrorOverlay();\n    }\n    let assets = data.assets;\n\n    // Handle HMR Update\n    let handled = assets.every(asset => {\n      return asset.type === 'css' || asset.type === 'js' && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);\n    });\n\n    // Dispatch a custom event in case a bundle was not found. This might mean\n    // an asset on the server changed and we should reload the page. This event\n    // gives the client an opportunity to refresh without losing state\n    // (e.g. via React Server Components). If e.preventDefault() is not called,\n    // we will trigger a full page reload.\n    if (handled && bundleNotFound && assets.some(a => a.envHash !== HMR_ENV_HASH) && typeof window !== 'undefined' && typeof CustomEvent !== 'undefined') {\n      handled = !window.dispatchEvent(new CustomEvent('parcelhmrreload', {\n        cancelable: true\n      }));\n    }\n    if (handled) {\n      console.clear();\n\n      // Dispatch custom event so other runtimes (e.g React Refresh) are aware.\n      if (typeof window !== 'undefined' && typeof CustomEvent !== 'undefined') {\n        window.dispatchEvent(new CustomEvent('parcelhmraccept'));\n      }\n      await hmrApplyUpdates(assets);\n      hmrDisposeQueue();\n\n      // Run accept callbacks. This will also re-execute other disposed assets in topological order.\n      let processedAssets = {};\n      for (let i = 0; i < assetsToAccept.length; i++) {\n        let id = assetsToAccept[i][1];\n        if (!processedAssets[id]) {\n          hmrAccept(assetsToAccept[i][0], id);\n          processedAssets[id] = true;\n        }\n      }\n    } else fullReload();\n  }\n  if (data.type === 'error') {\n    // Log parcel errors to console\n    for (let ansiDiagnostic of data.diagnostics.ansi) {\n      let stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;\n      console.error('🚨 [parcel]: ' + ansiDiagnostic.message + '\\n' + stack + '\\n\\n' + ansiDiagnostic.hints.join('\\n'));\n    }\n    if (typeof document !== 'undefined') {\n      // Render the fancy html overlay\n      removeErrorOverlay();\n      var overlay = createErrorOverlay(data.diagnostics.html);\n      // $FlowFixMe\n      document.body.appendChild(overlay);\n    }\n  }\n}\nfunction removeErrorOverlay() {\n  var overlay = document.getElementById(OVERLAY_ID);\n  if (overlay) {\n    overlay.remove();\n    console.log('[parcel] ✨ Error resolved');\n  }\n}\nfunction createErrorOverlay(diagnostics) {\n  var overlay = document.createElement('div');\n  overlay.id = OVERLAY_ID;\n  let errorHTML = '<div style=\"background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;\">';\n  for (let diagnostic of diagnostics) {\n    let stack = diagnostic.frames.length ? diagnostic.frames.reduce((p, frame) => {\n      return `${p}\n<a href=\"${protocol === 'wss' ? 'https' : 'http'}://${hostname}:${port}/__parcel_launch_editor?file=${encodeURIComponent(frame.location)}\" style=\"text-decoration: underline; color: #888\" onclick=\"fetch(this.href); return false\">${frame.location}</a>\n${frame.code}`;\n    }, '') : diagnostic.stack;\n    errorHTML += `\n      <div>\n        <div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">\n          🚨 ${diagnostic.message}\n        </div>\n        <pre>${stack}</pre>\n        <div>\n          ${diagnostic.hints.map(hint => '<div>💡 ' + hint + '</div>').join('')}\n        </div>\n        ${diagnostic.documentation ? `<div>📝 <a style=\"color: violet\" href=\"${diagnostic.documentation}\" target=\"_blank\">Learn more</a></div>` : ''}\n      </div>\n    `;\n  }\n  errorHTML += '</div>';\n  overlay.innerHTML = errorHTML;\n  return overlay;\n}\nfunction fullReload() {\n  if (typeof location !== 'undefined' && 'reload' in location) {\n    location.reload();\n  } else if (typeof extCtx !== 'undefined' && extCtx && extCtx.runtime && extCtx.runtime.reload) {\n    extCtx.runtime.reload();\n  } else {\n    try {\n      let {\n        workerData,\n        parentPort\n      } = module.bundle.root('node:worker_threads') /*: any*/;\n      if (workerData !== null && workerData !== void 0 && workerData.__parcel) {\n        parentPort.postMessage('restart');\n      }\n    } catch (err) {\n      console.error('[parcel] ⚠️ An HMR update was not accepted. Please restart the process.');\n    }\n  }\n}\nfunction getParents(bundle, id) /*: Array<[ParcelRequire, string]> */{\n  var modules = bundle.modules;\n  if (!modules) {\n    return [];\n  }\n  var parents = [];\n  var k, d, dep;\n  for (k in modules) {\n    for (d in modules[k][1]) {\n      dep = modules[k][1][d];\n      if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {\n        parents.push([bundle, k]);\n      }\n    }\n  }\n  if (bundle.parent) {\n    parents = parents.concat(getParents(bundle.parent, id));\n  }\n  return parents;\n}\nfunction updateLink(link) {\n  var href = link.getAttribute('href');\n  if (!href) {\n    return;\n  }\n  var newLink = link.cloneNode();\n  newLink.onload = function () {\n    if (link.parentNode !== null) {\n      // $FlowFixMe\n      link.parentNode.removeChild(link);\n    }\n  };\n  newLink.setAttribute('href',\n  // $FlowFixMe\n  href.split('?')[0] + '?' + Date.now());\n  // $FlowFixMe\n  link.parentNode.insertBefore(newLink, link.nextSibling);\n}\nvar cssTimeout = null;\nfunction reloadCSS() {\n  if (cssTimeout || typeof document === 'undefined') {\n    return;\n  }\n  cssTimeout = setTimeout(function () {\n    var links = document.querySelectorAll('link[rel=\"stylesheet\"]');\n    for (var i = 0; i < links.length; i++) {\n      // $FlowFixMe[incompatible-type]\n      var href /*: string */ = links[i].getAttribute('href');\n      var hostname = getHostname();\n      var servedFromHMRServer = hostname === 'localhost' ? new RegExp('^(https?:\\\\/\\\\/(0.0.0.0|127.0.0.1)|localhost):' + getPort()).test(href) : href.indexOf(hostname + ':' + getPort());\n      var absolute = /^https?:\\/\\//i.test(href) && href.indexOf(location.origin) !== 0 && !servedFromHMRServer;\n      if (!absolute) {\n        updateLink(links[i]);\n      }\n    }\n    cssTimeout = null;\n  }, 50);\n}\nfunction hmrDownload(asset) {\n  if (asset.type === 'js') {\n    if (typeof document !== 'undefined') {\n      let script = document.createElement('script');\n      script.src = asset.url + '?t=' + Date.now();\n      if (asset.outputFormat === 'esmodule') {\n        script.type = 'module';\n      }\n      return new Promise((resolve, reject) => {\n        var _document$head;\n        script.onload = () => resolve(script);\n        script.onerror = reject;\n        (_document$head = document.head) === null || _document$head === void 0 || _document$head.appendChild(script);\n      });\n    } else if (typeof importScripts === 'function') {\n      // Worker scripts\n      if (asset.outputFormat === 'esmodule') {\n        return __parcel__import__(asset.url + '?t=' + Date.now());\n      } else {\n        return new Promise((resolve, reject) => {\n          try {\n            __parcel__importScripts__(asset.url + '?t=' + Date.now());\n            resolve();\n          } catch (err) {\n            reject(err);\n          }\n        });\n      }\n    }\n  }\n}\nasync function hmrApplyUpdates(assets) {\n  global.parcelHotUpdate = Object.create(null);\n  let scriptsToRemove;\n  try {\n    // If sourceURL comments aren't supported in eval, we need to load\n    // the update from the dev server over HTTP so that stack traces\n    // are correct in errors/logs. This is much slower than eval, so\n    // we only do it if needed (currently just Safari).\n    // https://bugs.webkit.org/show_bug.cgi?id=137297\n    // This path is also taken if a CSP disallows eval.\n    if (!supportsSourceURL) {\n      let promises = assets.map(asset => {\n        var _hmrDownload;\n        return (_hmrDownload = hmrDownload(asset)) === null || _hmrDownload === void 0 ? void 0 : _hmrDownload.catch(err => {\n          // Web extension fix\n          if (extCtx && extCtx.runtime && extCtx.runtime.getManifest().manifest_version == 3 && typeof ServiceWorkerGlobalScope != 'undefined' && global instanceof ServiceWorkerGlobalScope) {\n            extCtx.runtime.reload();\n            return;\n          }\n          throw err;\n        });\n      });\n      scriptsToRemove = await Promise.all(promises);\n    }\n    assets.forEach(function (asset) {\n      hmrApply(module.bundle.root, asset);\n    });\n  } finally {\n    delete global.parcelHotUpdate;\n    if (scriptsToRemove) {\n      scriptsToRemove.forEach(script => {\n        if (script) {\n          var _document$head2;\n          (_document$head2 = document.head) === null || _document$head2 === void 0 || _document$head2.removeChild(script);\n        }\n      });\n    }\n  }\n}\nfunction hmrApply(bundle /*: ParcelRequire */, asset /*:  HMRAsset */) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n  if (asset.type === 'css') {\n    reloadCSS();\n  } else if (asset.type === 'js') {\n    let deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];\n    if (deps) {\n      if (modules[asset.id]) {\n        // Remove dependencies that are removed and will become orphaned.\n        // This is necessary so that if the asset is added back again, the cache is gone, and we prevent a full page reload.\n        let oldDeps = modules[asset.id][1];\n        for (let dep in oldDeps) {\n          if (!deps[dep] || deps[dep] !== oldDeps[dep]) {\n            let id = oldDeps[dep];\n            let parents = getParents(module.bundle.root, id);\n            if (parents.length === 1) {\n              hmrDelete(module.bundle.root, id);\n            }\n          }\n        }\n      }\n      if (supportsSourceURL) {\n        // Global eval. We would use `new Function` here but browser\n        // support for source maps is better with eval.\n        (0, eval)(asset.output);\n      }\n\n      // $FlowFixMe\n      let fn = global.parcelHotUpdate[asset.id];\n      modules[asset.id] = [fn, deps];\n    }\n\n    // Always traverse to the parent bundle, even if we already replaced the asset in this bundle.\n    // This is required in case modules are duplicated. We need to ensure all instances have the updated code.\n    if (bundle.parent) {\n      hmrApply(bundle.parent, asset);\n    }\n  }\n}\nfunction hmrDelete(bundle, id) {\n  let modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n  if (modules[id]) {\n    // Collect dependencies that will become orphaned when this module is deleted.\n    let deps = modules[id][1];\n    let orphans = [];\n    for (let dep in deps) {\n      let parents = getParents(module.bundle.root, deps[dep]);\n      if (parents.length === 1) {\n        orphans.push(deps[dep]);\n      }\n    }\n\n    // Delete the module. This must be done before deleting dependencies in case of circular dependencies.\n    delete modules[id];\n    delete bundle.cache[id];\n\n    // Now delete the orphans.\n    orphans.forEach(id => {\n      hmrDelete(module.bundle.root, id);\n    });\n  } else if (bundle.parent) {\n    hmrDelete(bundle.parent, id);\n  }\n}\nfunction hmrAcceptCheck(bundle /*: ParcelRequire */, id /*: string */, depsByBundle /*: ?{ [string]: { [string]: string } }*/) {\n  checkedAssets = {};\n  if (hmrAcceptCheckOne(bundle, id, depsByBundle)) {\n    return true;\n  }\n\n  // Traverse parents breadth first. All possible ancestries must accept the HMR update, or we'll reload.\n  let parents = getParents(module.bundle.root, id);\n  let accepted = false;\n  while (parents.length > 0) {\n    let v = parents.shift();\n    let a = hmrAcceptCheckOne(v[0], v[1], null);\n    if (a) {\n      // If this parent accepts, stop traversing upward, but still consider siblings.\n      accepted = true;\n    } else if (a !== null) {\n      // Otherwise, queue the parents in the next level upward.\n      let p = getParents(module.bundle.root, v[1]);\n      if (p.length === 0) {\n        // If there are no parents, then we've reached an entry without accepting. Reload.\n        accepted = false;\n        break;\n      }\n      parents.push(...p);\n    }\n  }\n  return accepted;\n}\nfunction hmrAcceptCheckOne(bundle /*: ParcelRequire */, id /*: string */, depsByBundle /*: ?{ [string]: { [string]: string } }*/) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n  if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {\n    // If we reached the root bundle without finding where the asset should go,\n    // there's nothing to do. Mark as \"accepted\" so we don't reload the page.\n    if (!bundle.parent) {\n      bundleNotFound = true;\n      return true;\n    }\n    return hmrAcceptCheckOne(bundle.parent, id, depsByBundle);\n  }\n  if (checkedAssets[id]) {\n    return null;\n  }\n  checkedAssets[id] = true;\n  var cached = bundle.cache[id];\n  if (!cached) {\n    return true;\n  }\n  assetsToDispose.push([bundle, id]);\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    assetsToAccept.push([bundle, id]);\n    return true;\n  }\n  return false;\n}\nfunction hmrDisposeQueue() {\n  // Dispose all old assets.\n  for (let i = 0; i < assetsToDispose.length; i++) {\n    let id = assetsToDispose[i][1];\n    if (!disposedAssets[id]) {\n      hmrDispose(assetsToDispose[i][0], id);\n      disposedAssets[id] = true;\n    }\n  }\n  assetsToDispose = [];\n}\nfunction hmrDispose(bundle /*: ParcelRequire */, id /*: string */) {\n  var cached = bundle.cache[id];\n  bundle.hotData[id] = {};\n  if (cached && cached.hot) {\n    cached.hot.data = bundle.hotData[id];\n  }\n  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {\n    cached.hot._disposeCallbacks.forEach(function (cb) {\n      cb(bundle.hotData[id]);\n    });\n  }\n  delete bundle.cache[id];\n}\nfunction hmrAccept(bundle /*: ParcelRequire */, id /*: string */) {\n  // Execute the module.\n  bundle(id);\n\n  // Run the accept callbacks in the new version of the module.\n  var cached = bundle.cache[id];\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    let assetsToAlsoAccept = [];\n    cached.hot._acceptCallbacks.forEach(function (cb) {\n      let additionalAssets = cb(function () {\n        return getParents(module.bundle.root, id);\n      });\n      if (Array.isArray(additionalAssets) && additionalAssets.length) {\n        assetsToAlsoAccept.push(...additionalAssets);\n      }\n    });\n    if (assetsToAlsoAccept.length) {\n      let handled = assetsToAlsoAccept.every(function (a) {\n        return hmrAcceptCheck(a[0], a[1]);\n      });\n      if (!handled) {\n        return fullReload();\n      }\n      hmrDisposeQueue();\n    }\n  }\n}","import { marked } from \"marked\";\r\n\r\nconst chatLog = document.getElementById(\"chat-log\");\r\nconst promptInput = document.getElementById(\"prompt-input\");\r\nconst sendButton = document.getElementById(\"send-button\");\r\nconst currentModel = \"llama3.2:latest\";\r\n\r\n// Create escape HTML function\r\nfunction escapeHTML(str) {\r\n  return str.replace(/[&<>\"']/g, function (match) {\r\n    switch (match) {\r\n      case '&': return '&amp;';\r\n      case '<': return '&lt;';\r\n      case '>': return '&gt;';\r\n      case '\"': return '&quot;';\r\n      case \"'\": return '&#039;';\r\n    }\r\n  });\r\n}\r\n\r\n\r\n// Function to fetch data from the Ollama API\r\nasync function getResponse() {\r\n    const prompt = marked.parse(promptInput.value);\r\n    if (!prompt) return;\r\n\r\n    const response = await fetch(\"http://localhost:11434/api/generate\", {\r\n        method: \"POST\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n            model: currentModel,\r\n            prompt: prompt,\r\n            stream: true,\r\n        }),\r\n    });\r\n\r\n    if (!response.ok || !response.body) {\r\n        console.error(\r\n            \"Error fetching response:\",\r\n            response.status,\r\n            response.statusText,\r\n        );\r\n        chatLog.innerHTML += `<p>Error: Could not get response.</p>`;\r\n        return;\r\n    }\r\n\r\n    const reader = response.body.getReader();\r\n    const decoder = new TextDecoder();\r\n    let fullReply = \"\";\r\n\r\n    const userMsg = document.createElement(\"div\");\r\n    userMsg.innerHTML = `<div class=\"user-message\"><div class=\"user-icon\">🙂</div><div class=\"user-prompt\">${prompt}</div></div>`;\r\n    chatLog.appendChild(userMsg);\r\n\r\n    const botMsg = document.createElement(\"div\");\r\n    botMsg.innerHTML = `<strong>🤖</strong> `;\r\n    chatLog.appendChild(botMsg);\r\n\r\n    while (true) {\r\n        const { value, done } = await reader.read();\r\n        if (done) break;\r\n\r\n        const chunk = decoder.decode(value, { stream: true });\r\n        const lines = chunk.split(\"\\n\").filter((line) => line.trim() !== \"\");\r\n\r\n        for (const line of lines) {\r\n            try {\r\n                const data = JSON.parse(line);\r\n                if (data.response) {\r\n                    fullReply += data.response;\r\n                    botMsg.innerHTML = `<div class=\"bot-message\"><div class=\"bot-icon\">🤖</div><div class=\"bot-prompt\">${marked.parse(fullReply)}</div></div>`;\r\n                }\r\n            } catch (err) {\r\n                console.error(\"Error parsing JSON chunk:\", err, line);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// Function to display messages in the chat log\r\nfunction displayMessage(sender, message) {\r\n    const messageElement = document.createElement(\"div\");\r\n    messageElement.innerHTML = `${sender}: ${message}`;\r\n    chatLog.appendChild(messageElement);\r\n}\r\n\r\n// Event listener for the Send button\r\nsendButton.addEventListener(\"click\", getResponse);\r\n\r\n// Event listener for Enter key in the prompt input\r\npromptInput.addEventListener(\"keyup\", function (event) {\r\n    if (event.key === \"Enter\") {\r\n        getResponse();\r\n    }\r\n});\r\n\r\n// Function to display current model name\r\nfunction displayCurrentModel() {\r\n    const modelContainer = document.getElementById(\"model-name\");\r\n    modelContainer.innerText = currentModel;\r\n}\r\ndisplayCurrentModel();\r\n",null,"/**\n * Gets the original marked default options.\n */\nexport function _getDefaults() {\n    return {\n        async: false,\n        breaks: false,\n        extensions: null,\n        gfm: true,\n        hooks: null,\n        pedantic: false,\n        renderer: null,\n        silent: false,\n        tokenizer: null,\n        walkTokens: null,\n    };\n}\nexport let _defaults = _getDefaults();\nexport function changeDefaults(newDefaults) {\n    _defaults = newDefaults;\n}\n","const noopTest = { exec: () => null };\nfunction edit(regex, opt = '') {\n    let source = typeof regex === 'string' ? regex : regex.source;\n    const obj = {\n        replace: (name, val) => {\n            let valSource = typeof val === 'string' ? val : val.source;\n            valSource = valSource.replace(other.caret, '$1');\n            source = source.replace(name, valSource);\n            return obj;\n        },\n        getRegex: () => {\n            return new RegExp(source, opt);\n        },\n    };\n    return obj;\n}\nexport const other = {\n    codeRemoveIndent: /^(?: {1,4}| {0,3}\\t)/gm,\n    outputLinkReplace: /\\\\([\\[\\]])/g,\n    indentCodeCompensation: /^(\\s+)(?:```)/,\n    beginningSpace: /^\\s+/,\n    endingHash: /#$/,\n    startingSpaceChar: /^ /,\n    endingSpaceChar: / $/,\n    nonSpaceChar: /[^ ]/,\n    newLineCharGlobal: /\\n/g,\n    tabCharGlobal: /\\t/g,\n    multipleSpaceGlobal: /\\s+/g,\n    blankLine: /^[ \\t]*$/,\n    doubleBlankLine: /\\n[ \\t]*\\n[ \\t]*$/,\n    blockquoteStart: /^ {0,3}>/,\n    blockquoteSetextReplace: /\\n {0,3}((?:=+|-+) *)(?=\\n|$)/g,\n    blockquoteSetextReplace2: /^ {0,3}>[ \\t]?/gm,\n    listReplaceTabs: /^\\t+/,\n    listReplaceNesting: /^ {1,4}(?=( {4})*[^ ])/g,\n    listIsTask: /^\\[[ xX]\\] /,\n    listReplaceTask: /^\\[[ xX]\\] +/,\n    anyLine: /\\n.*\\n/,\n    hrefBrackets: /^<(.*)>$/,\n    tableDelimiter: /[:|]/,\n    tableAlignChars: /^\\||\\| *$/g,\n    tableRowBlankLine: /\\n[ \\t]*$/,\n    tableAlignRight: /^ *-+: *$/,\n    tableAlignCenter: /^ *:-+: *$/,\n    tableAlignLeft: /^ *:-+ *$/,\n    startATag: /^<a /i,\n    endATag: /^<\\/a>/i,\n    startPreScriptTag: /^<(pre|code|kbd|script)(\\s|>)/i,\n    endPreScriptTag: /^<\\/(pre|code|kbd|script)(\\s|>)/i,\n    startAngleBracket: /^</,\n    endAngleBracket: />$/,\n    pedanticHrefTitle: /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/,\n    unicodeAlphaNumeric: /[\\p{L}\\p{N}]/u,\n    escapeTest: /[&<>\"']/,\n    escapeReplace: /[&<>\"']/g,\n    escapeTestNoEncode: /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/,\n    escapeReplaceNoEncode: /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/g,\n    unescapeTest: /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig,\n    caret: /(^|[^\\[])\\^/g,\n    percentDecode: /%25/g,\n    findPipe: /\\|/g,\n    splitPipe: / \\|/,\n    slashPipe: /\\\\\\|/g,\n    carriageReturn: /\\r\\n|\\r/g,\n    spaceLine: /^ +$/gm,\n    notSpaceStart: /^\\S*/,\n    endingNewline: /\\n$/,\n    listItemRegex: (bull) => new RegExp(`^( {0,3}${bull})((?:[\\t ][^\\\\n]*)?(?:\\\\n|$))`),\n    nextBulletRegex: (indent) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\\\d{1,9}[.)])((?:[ \\t][^\\\\n]*)?(?:\\\\n|$))`),\n    hrRegex: (indent) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$)`),\n    fencesBeginRegex: (indent) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:\\`\\`\\`|~~~)`),\n    headingBeginRegex: (indent) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}#`),\n    htmlBeginRegex: (indent) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}<(?:[a-z].*>|!--)`, 'i'),\n};\n/**\n * Block-Level Grammar\n */\nconst newline = /^(?:[ \\t]*(?:\\n|$))+/;\nconst blockCode = /^((?: {4}| {0,3}\\t)[^\\n]+(?:\\n(?:[ \\t]*(?:\\n|$))*)?)+/;\nconst fences = /^ {0,3}(`{3,}(?=[^`\\n]*(?:\\n|$))|~{3,})([^\\n]*)(?:\\n|$)(?:|([\\s\\S]*?)(?:\\n|$))(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/;\nconst hr = /^ {0,3}((?:-[\\t ]*){3,}|(?:_[ \\t]*){3,}|(?:\\*[ \\t]*){3,})(?:\\n+|$)/;\nconst heading = /^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/;\nconst bullet = /(?:[*+-]|\\d{1,9}[.)])/;\nconst lheadingCore = /^(?!bull |blockCode|fences|blockquote|heading|html|table)((?:.|\\n(?!\\s*?\\n|bull |blockCode|fences|blockquote|heading|html|table))+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/;\nconst lheading = edit(lheadingCore)\n    .replace(/bull/g, bullet) // lists can interrupt\n    .replace(/blockCode/g, /(?: {4}| {0,3}\\t)/) // indented code blocks can interrupt\n    .replace(/fences/g, / {0,3}(?:`{3,}|~{3,})/) // fenced code blocks can interrupt\n    .replace(/blockquote/g, / {0,3}>/) // blockquote can interrupt\n    .replace(/heading/g, / {0,3}#{1,6}/) // ATX heading can interrupt\n    .replace(/html/g, / {0,3}<[^\\n>]+>\\n/) // block html can interrupt\n    .replace(/\\|table/g, '') // table not in commonmark\n    .getRegex();\nconst lheadingGfm = edit(lheadingCore)\n    .replace(/bull/g, bullet) // lists can interrupt\n    .replace(/blockCode/g, /(?: {4}| {0,3}\\t)/) // indented code blocks can interrupt\n    .replace(/fences/g, / {0,3}(?:`{3,}|~{3,})/) // fenced code blocks can interrupt\n    .replace(/blockquote/g, / {0,3}>/) // blockquote can interrupt\n    .replace(/heading/g, / {0,3}#{1,6}/) // ATX heading can interrupt\n    .replace(/html/g, / {0,3}<[^\\n>]+>\\n/) // block html can interrupt\n    .replace(/table/g, / {0,3}\\|?(?:[:\\- ]*\\|)+[\\:\\- ]*\\n/) // table can interrupt\n    .getRegex();\nconst _paragraph = /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/;\nconst blockText = /^[^\\n]+/;\nconst _blockLabel = /(?!\\s*\\])(?:\\\\.|[^\\[\\]\\\\])+/;\nconst def = edit(/^ {0,3}\\[(label)\\]: *(?:\\n[ \\t]*)?([^<\\s][^\\s]*|<.*?>)(?:(?: +(?:\\n[ \\t]*)?| *\\n[ \\t]*)(title))? *(?:\\n+|$)/)\n    .replace('label', _blockLabel)\n    .replace('title', /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/)\n    .getRegex();\nconst list = edit(/^( {0,3}bull)([ \\t][^\\n]+?)?(?:\\n|$)/)\n    .replace(/bull/g, bullet)\n    .getRegex();\nconst _tag = 'address|article|aside|base|basefont|blockquote|body|caption'\n    + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption'\n    + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe'\n    + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option'\n    + '|p|param|search|section|summary|table|tbody|td|tfoot|th|thead|title'\n    + '|tr|track|ul';\nconst _comment = /<!--(?:-?>|[\\s\\S]*?(?:-->|$))/;\nconst html = edit('^ {0,3}(?:' // optional indentation\n    + '<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n    + '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n    + '|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)' // (3)\n    + '|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)' // (4)\n    + '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)' // (5)\n    + '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n[ \\t]*)+\\\\n|$)' // (6)\n    + '|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n[ \\t]*)+\\\\n|$)' // (7) open tag\n    + '|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n[ \\t]*)+\\\\n|$)' // (7) closing tag\n    + ')', 'i')\n    .replace('comment', _comment)\n    .replace('tag', _tag)\n    .replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/)\n    .getRegex();\nconst paragraph = edit(_paragraph)\n    .replace('hr', hr)\n    .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n    .replace('|lheading', '') // setext headings don't interrupt commonmark paragraphs\n    .replace('|table', '')\n    .replace('blockquote', ' {0,3}>')\n    .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n    .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n    .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n    .replace('tag', _tag) // pars can be interrupted by type (6) html blocks\n    .getRegex();\nconst blockquote = edit(/^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/)\n    .replace('paragraph', paragraph)\n    .getRegex();\n/**\n * Normal Block Grammar\n */\nconst blockNormal = {\n    blockquote,\n    code: blockCode,\n    def,\n    fences,\n    heading,\n    hr,\n    html,\n    lheading,\n    list,\n    newline,\n    paragraph,\n    table: noopTest,\n    text: blockText,\n};\n/**\n * GFM Block Grammar\n */\nconst gfmTable = edit('^ *([^\\\\n ].*)\\\\n' // Header\n    + ' {0,3}((?:\\\\| *)?:?-+:? *(?:\\\\| *:?-+:? *)*(?:\\\\| *)?)' // Align\n    + '(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)') // Cells\n    .replace('hr', hr)\n    .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n    .replace('blockquote', ' {0,3}>')\n    .replace('code', '(?: {4}| {0,3}\\t)[^\\\\n]')\n    .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n    .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n    .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n    .replace('tag', _tag) // tables can be interrupted by type (6) html blocks\n    .getRegex();\nconst blockGfm = {\n    ...blockNormal,\n    lheading: lheadingGfm,\n    table: gfmTable,\n    paragraph: edit(_paragraph)\n        .replace('hr', hr)\n        .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n        .replace('|lheading', '') // setext headings don't interrupt commonmark paragraphs\n        .replace('table', gfmTable) // interrupt paragraphs with table\n        .replace('blockquote', ' {0,3}>')\n        .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n        .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n        .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n        .replace('tag', _tag) // pars can be interrupted by type (6) html blocks\n        .getRegex(),\n};\n/**\n * Pedantic grammar (original John Gruber's loose markdown specification)\n */\nconst blockPedantic = {\n    ...blockNormal,\n    html: edit('^ *(?:comment *(?:\\\\n|\\\\s*$)'\n        + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n        + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))')\n        .replace('comment', _comment)\n        .replace(/tag/g, '(?!(?:'\n        + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub'\n        + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)'\n        + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b')\n        .getRegex(),\n    def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n    heading: /^(#{1,6})(.*)(?:\\n+|$)/,\n    fences: noopTest, // fences not supported\n    lheading: /^(.+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n    paragraph: edit(_paragraph)\n        .replace('hr', hr)\n        .replace('heading', ' *#{1,6} *[^\\n]')\n        .replace('lheading', lheading)\n        .replace('|table', '')\n        .replace('blockquote', ' {0,3}>')\n        .replace('|fences', '')\n        .replace('|list', '')\n        .replace('|html', '')\n        .replace('|tag', '')\n        .getRegex(),\n};\n/**\n * Inline-Level Grammar\n */\nconst escape = /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/;\nconst inlineCode = /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/;\nconst br = /^( {2,}|\\\\)\\n(?!\\s*$)/;\nconst inlineText = /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/;\n// list of unicode punctuation marks, plus any missing characters from CommonMark spec\nconst _punctuation = /[\\p{P}\\p{S}]/u;\nconst _punctuationOrSpace = /[\\s\\p{P}\\p{S}]/u;\nconst _notPunctuationOrSpace = /[^\\s\\p{P}\\p{S}]/u;\nconst punctuation = edit(/^((?![*_])punctSpace)/, 'u')\n    .replace(/punctSpace/g, _punctuationOrSpace).getRegex();\n// GFM allows ~ inside strong and em for strikethrough\nconst _punctuationGfmStrongEm = /(?!~)[\\p{P}\\p{S}]/u;\nconst _punctuationOrSpaceGfmStrongEm = /(?!~)[\\s\\p{P}\\p{S}]/u;\nconst _notPunctuationOrSpaceGfmStrongEm = /(?:[^\\s\\p{P}\\p{S}]|~)/u;\n// sequences em should skip over [title](link), `code`, <html>\nconst blockSkip = /\\[[^[\\]]*?\\]\\((?:\\\\.|[^\\\\\\(\\)]|\\((?:\\\\.|[^\\\\\\(\\)])*\\))*\\)|`[^`]*?`|<[^<>]*?>/g;\nconst emStrongLDelimCore = /^(?:\\*+(?:((?!\\*)punct)|[^\\s*]))|^_+(?:((?!_)punct)|([^\\s_]))/;\nconst emStrongLDelim = edit(emStrongLDelimCore, 'u')\n    .replace(/punct/g, _punctuation)\n    .getRegex();\nconst emStrongLDelimGfm = edit(emStrongLDelimCore, 'u')\n    .replace(/punct/g, _punctuationGfmStrongEm)\n    .getRegex();\nconst emStrongRDelimAstCore = '^[^_*]*?__[^_*]*?\\\\*[^_*]*?(?=__)' // Skip orphan inside strong\n    + '|[^*]+(?=[^*])' // Consume to delim\n    + '|(?!\\\\*)punct(\\\\*+)(?=[\\\\s]|$)' // (1) #*** can only be a Right Delimiter\n    + '|notPunctSpace(\\\\*+)(?!\\\\*)(?=punctSpace|$)' // (2) a***#, a*** can only be a Right Delimiter\n    + '|(?!\\\\*)punctSpace(\\\\*+)(?=notPunctSpace)' // (3) #***a, ***a can only be Left Delimiter\n    + '|[\\\\s](\\\\*+)(?!\\\\*)(?=punct)' // (4) ***# can only be Left Delimiter\n    + '|(?!\\\\*)punct(\\\\*+)(?!\\\\*)(?=punct)' // (5) #***# can be either Left or Right Delimiter\n    + '|notPunctSpace(\\\\*+)(?=notPunctSpace)'; // (6) a***a can be either Left or Right Delimiter\nconst emStrongRDelimAst = edit(emStrongRDelimAstCore, 'gu')\n    .replace(/notPunctSpace/g, _notPunctuationOrSpace)\n    .replace(/punctSpace/g, _punctuationOrSpace)\n    .replace(/punct/g, _punctuation)\n    .getRegex();\nconst emStrongRDelimAstGfm = edit(emStrongRDelimAstCore, 'gu')\n    .replace(/notPunctSpace/g, _notPunctuationOrSpaceGfmStrongEm)\n    .replace(/punctSpace/g, _punctuationOrSpaceGfmStrongEm)\n    .replace(/punct/g, _punctuationGfmStrongEm)\n    .getRegex();\n// (6) Not allowed for _\nconst emStrongRDelimUnd = edit('^[^_*]*?\\\\*\\\\*[^_*]*?_[^_*]*?(?=\\\\*\\\\*)' // Skip orphan inside strong\n    + '|[^_]+(?=[^_])' // Consume to delim\n    + '|(?!_)punct(_+)(?=[\\\\s]|$)' // (1) #___ can only be a Right Delimiter\n    + '|notPunctSpace(_+)(?!_)(?=punctSpace|$)' // (2) a___#, a___ can only be a Right Delimiter\n    + '|(?!_)punctSpace(_+)(?=notPunctSpace)' // (3) #___a, ___a can only be Left Delimiter\n    + '|[\\\\s](_+)(?!_)(?=punct)' // (4) ___# can only be Left Delimiter\n    + '|(?!_)punct(_+)(?!_)(?=punct)', 'gu') // (5) #___# can be either Left or Right Delimiter\n    .replace(/notPunctSpace/g, _notPunctuationOrSpace)\n    .replace(/punctSpace/g, _punctuationOrSpace)\n    .replace(/punct/g, _punctuation)\n    .getRegex();\nconst anyPunctuation = edit(/\\\\(punct)/, 'gu')\n    .replace(/punct/g, _punctuation)\n    .getRegex();\nconst autolink = edit(/^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/)\n    .replace('scheme', /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/)\n    .replace('email', /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/)\n    .getRegex();\nconst _inlineComment = edit(_comment).replace('(?:-->|$)', '-->').getRegex();\nconst tag = edit('^comment'\n    + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n    + '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n    + '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n    + '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n    + '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>') // CDATA section\n    .replace('comment', _inlineComment)\n    .replace('attribute', /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/)\n    .getRegex();\nconst _inlineLabel = /(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/;\nconst link = edit(/^!?\\[(label)\\]\\(\\s*(href)(?:(?:[ \\t]*(?:\\n[ \\t]*)?)(title))?\\s*\\)/)\n    .replace('label', _inlineLabel)\n    .replace('href', /<(?:\\\\.|[^\\n<>\\\\])+>|[^ \\t\\n\\x00-\\x1f]*/)\n    .replace('title', /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/)\n    .getRegex();\nconst reflink = edit(/^!?\\[(label)\\]\\[(ref)\\]/)\n    .replace('label', _inlineLabel)\n    .replace('ref', _blockLabel)\n    .getRegex();\nconst nolink = edit(/^!?\\[(ref)\\](?:\\[\\])?/)\n    .replace('ref', _blockLabel)\n    .getRegex();\nconst reflinkSearch = edit('reflink|nolink(?!\\\\()', 'g')\n    .replace('reflink', reflink)\n    .replace('nolink', nolink)\n    .getRegex();\n/**\n * Normal Inline Grammar\n */\nconst inlineNormal = {\n    _backpedal: noopTest, // only used for GFM url\n    anyPunctuation,\n    autolink,\n    blockSkip,\n    br,\n    code: inlineCode,\n    del: noopTest,\n    emStrongLDelim,\n    emStrongRDelimAst,\n    emStrongRDelimUnd,\n    escape,\n    link,\n    nolink,\n    punctuation,\n    reflink,\n    reflinkSearch,\n    tag,\n    text: inlineText,\n    url: noopTest,\n};\n/**\n * Pedantic Inline Grammar\n */\nconst inlinePedantic = {\n    ...inlineNormal,\n    link: edit(/^!?\\[(label)\\]\\((.*?)\\)/)\n        .replace('label', _inlineLabel)\n        .getRegex(),\n    reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/)\n        .replace('label', _inlineLabel)\n        .getRegex(),\n};\n/**\n * GFM Inline Grammar\n */\nconst inlineGfm = {\n    ...inlineNormal,\n    emStrongRDelimAst: emStrongRDelimAstGfm,\n    emStrongLDelim: emStrongLDelimGfm,\n    url: edit(/^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/, 'i')\n        .replace('email', /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/)\n        .getRegex(),\n    _backpedal: /(?:[^?!.,:;*_'\"~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'\"~)]+(?!$))+/,\n    del: /^(~~?)(?=[^\\s~])((?:\\\\.|[^\\\\])*?(?:\\\\.|[^\\s~\\\\]))\\1(?=[^~]|$)/,\n    text: /^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/,\n};\n/**\n * GFM + Line Breaks Inline Grammar\n */\nconst inlineBreaks = {\n    ...inlineGfm,\n    br: edit(br).replace('{2,}', '*').getRegex(),\n    text: edit(inlineGfm.text)\n        .replace('\\\\b_', '\\\\b_| {2,}\\\\n')\n        .replace(/\\{2,\\}/g, '*')\n        .getRegex(),\n};\n/**\n * exports\n */\nexport const block = {\n    normal: blockNormal,\n    gfm: blockGfm,\n    pedantic: blockPedantic,\n};\nexport const inline = {\n    normal: inlineNormal,\n    gfm: inlineGfm,\n    breaks: inlineBreaks,\n    pedantic: inlinePedantic,\n};\n","import { other } from './rules.ts';\n/**\n * Helpers\n */\nconst escapeReplacements = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;',\n};\nconst getEscapeReplacement = (ch) => escapeReplacements[ch];\nexport function escape(html, encode) {\n    if (encode) {\n        if (other.escapeTest.test(html)) {\n            return html.replace(other.escapeReplace, getEscapeReplacement);\n        }\n    }\n    else {\n        if (other.escapeTestNoEncode.test(html)) {\n            return html.replace(other.escapeReplaceNoEncode, getEscapeReplacement);\n        }\n    }\n    return html;\n}\nexport function unescape(html) {\n    // explicitly match decimal, hex, and named HTML entities\n    return html.replace(other.unescapeTest, (_, n) => {\n        n = n.toLowerCase();\n        if (n === 'colon')\n            return ':';\n        if (n.charAt(0) === '#') {\n            return n.charAt(1) === 'x'\n                ? String.fromCharCode(parseInt(n.substring(2), 16))\n                : String.fromCharCode(+n.substring(1));\n        }\n        return '';\n    });\n}\nexport function cleanUrl(href) {\n    try {\n        href = encodeURI(href).replace(other.percentDecode, '%');\n    }\n    catch {\n        return null;\n    }\n    return href;\n}\nexport function splitCells(tableRow, count) {\n    // ensure that every cell-delimiting pipe has a space\n    // before it to distinguish it from an escaped pipe\n    const row = tableRow.replace(other.findPipe, (match, offset, str) => {\n        let escaped = false;\n        let curr = offset;\n        while (--curr >= 0 && str[curr] === '\\\\')\n            escaped = !escaped;\n        if (escaped) {\n            // odd number of slashes means | is escaped\n            // so we leave it alone\n            return '|';\n        }\n        else {\n            // add space before unescaped |\n            return ' |';\n        }\n    }), cells = row.split(other.splitPipe);\n    let i = 0;\n    // First/last cell in a row cannot be empty if it has no leading/trailing pipe\n    if (!cells[0].trim()) {\n        cells.shift();\n    }\n    if (cells.length > 0 && !cells.at(-1)?.trim()) {\n        cells.pop();\n    }\n    if (count) {\n        if (cells.length > count) {\n            cells.splice(count);\n        }\n        else {\n            while (cells.length < count)\n                cells.push('');\n        }\n    }\n    for (; i < cells.length; i++) {\n        // leading or trailing whitespace is ignored per the gfm spec\n        cells[i] = cells[i].trim().replace(other.slashPipe, '|');\n    }\n    return cells;\n}\n/**\n * Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n * /c*$/ is vulnerable to REDOS.\n *\n * @param str\n * @param c\n * @param invert Remove suffix of non-c chars instead. Default falsey.\n */\nexport function rtrim(str, c, invert) {\n    const l = str.length;\n    if (l === 0) {\n        return '';\n    }\n    // Length of suffix matching the invert condition.\n    let suffLen = 0;\n    // Step left until we fail to match the invert condition.\n    while (suffLen < l) {\n        const currChar = str.charAt(l - suffLen - 1);\n        if (currChar === c && !invert) {\n            suffLen++;\n        }\n        else if (currChar !== c && invert) {\n            suffLen++;\n        }\n        else {\n            break;\n        }\n    }\n    return str.slice(0, l - suffLen);\n}\nexport function findClosingBracket(str, b) {\n    if (str.indexOf(b[1]) === -1) {\n        return -1;\n    }\n    let level = 0;\n    for (let i = 0; i < str.length; i++) {\n        if (str[i] === '\\\\') {\n            i++;\n        }\n        else if (str[i] === b[0]) {\n            level++;\n        }\n        else if (str[i] === b[1]) {\n            level--;\n            if (level < 0) {\n                return i;\n            }\n        }\n    }\n    if (level > 0) {\n        return -2;\n    }\n    return -1;\n}\n","import { _defaults } from './defaults.ts';\nimport { rtrim, splitCells, findClosingBracket, } from './helpers.ts';\nfunction outputLink(cap, link, raw, lexer, rules) {\n    const href = link.href;\n    const title = link.title || null;\n    const text = cap[1].replace(rules.other.outputLinkReplace, '$1');\n    lexer.state.inLink = true;\n    const token = {\n        type: cap[0].charAt(0) === '!' ? 'image' : 'link',\n        raw,\n        href,\n        title,\n        text,\n        tokens: lexer.inlineTokens(text),\n    };\n    lexer.state.inLink = false;\n    return token;\n}\nfunction indentCodeCompensation(raw, text, rules) {\n    const matchIndentToCode = raw.match(rules.other.indentCodeCompensation);\n    if (matchIndentToCode === null) {\n        return text;\n    }\n    const indentToCode = matchIndentToCode[1];\n    return text\n        .split('\\n')\n        .map(node => {\n        const matchIndentInNode = node.match(rules.other.beginningSpace);\n        if (matchIndentInNode === null) {\n            return node;\n        }\n        const [indentInNode] = matchIndentInNode;\n        if (indentInNode.length >= indentToCode.length) {\n            return node.slice(indentToCode.length);\n        }\n        return node;\n    })\n        .join('\\n');\n}\n/**\n * Tokenizer\n */\nexport class _Tokenizer {\n    options;\n    rules; // set by the lexer\n    lexer; // set by the lexer\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    space(src) {\n        const cap = this.rules.block.newline.exec(src);\n        if (cap && cap[0].length > 0) {\n            return {\n                type: 'space',\n                raw: cap[0],\n            };\n        }\n    }\n    code(src) {\n        const cap = this.rules.block.code.exec(src);\n        if (cap) {\n            const text = cap[0].replace(this.rules.other.codeRemoveIndent, '');\n            return {\n                type: 'code',\n                raw: cap[0],\n                codeBlockStyle: 'indented',\n                text: !this.options.pedantic\n                    ? rtrim(text, '\\n')\n                    : text,\n            };\n        }\n    }\n    fences(src) {\n        const cap = this.rules.block.fences.exec(src);\n        if (cap) {\n            const raw = cap[0];\n            const text = indentCodeCompensation(raw, cap[3] || '', this.rules);\n            return {\n                type: 'code',\n                raw,\n                lang: cap[2] ? cap[2].trim().replace(this.rules.inline.anyPunctuation, '$1') : cap[2],\n                text,\n            };\n        }\n    }\n    heading(src) {\n        const cap = this.rules.block.heading.exec(src);\n        if (cap) {\n            let text = cap[2].trim();\n            // remove trailing #s\n            if (this.rules.other.endingHash.test(text)) {\n                const trimmed = rtrim(text, '#');\n                if (this.options.pedantic) {\n                    text = trimmed.trim();\n                }\n                else if (!trimmed || this.rules.other.endingSpaceChar.test(trimmed)) {\n                    // CommonMark requires space before trailing #s\n                    text = trimmed.trim();\n                }\n            }\n            return {\n                type: 'heading',\n                raw: cap[0],\n                depth: cap[1].length,\n                text,\n                tokens: this.lexer.inline(text),\n            };\n        }\n    }\n    hr(src) {\n        const cap = this.rules.block.hr.exec(src);\n        if (cap) {\n            return {\n                type: 'hr',\n                raw: rtrim(cap[0], '\\n'),\n            };\n        }\n    }\n    blockquote(src) {\n        const cap = this.rules.block.blockquote.exec(src);\n        if (cap) {\n            let lines = rtrim(cap[0], '\\n').split('\\n');\n            let raw = '';\n            let text = '';\n            const tokens = [];\n            while (lines.length > 0) {\n                let inBlockquote = false;\n                const currentLines = [];\n                let i;\n                for (i = 0; i < lines.length; i++) {\n                    // get lines up to a continuation\n                    if (this.rules.other.blockquoteStart.test(lines[i])) {\n                        currentLines.push(lines[i]);\n                        inBlockquote = true;\n                    }\n                    else if (!inBlockquote) {\n                        currentLines.push(lines[i]);\n                    }\n                    else {\n                        break;\n                    }\n                }\n                lines = lines.slice(i);\n                const currentRaw = currentLines.join('\\n');\n                const currentText = currentRaw\n                    // precede setext continuation with 4 spaces so it isn't a setext\n                    .replace(this.rules.other.blockquoteSetextReplace, '\\n    $1')\n                    .replace(this.rules.other.blockquoteSetextReplace2, '');\n                raw = raw ? `${raw}\\n${currentRaw}` : currentRaw;\n                text = text ? `${text}\\n${currentText}` : currentText;\n                // parse blockquote lines as top level tokens\n                // merge paragraphs if this is a continuation\n                const top = this.lexer.state.top;\n                this.lexer.state.top = true;\n                this.lexer.blockTokens(currentText, tokens, true);\n                this.lexer.state.top = top;\n                // if there is no continuation then we are done\n                if (lines.length === 0) {\n                    break;\n                }\n                const lastToken = tokens.at(-1);\n                if (lastToken?.type === 'code') {\n                    // blockquote continuation cannot be preceded by a code block\n                    break;\n                }\n                else if (lastToken?.type === 'blockquote') {\n                    // include continuation in nested blockquote\n                    const oldToken = lastToken;\n                    const newText = oldToken.raw + '\\n' + lines.join('\\n');\n                    const newToken = this.blockquote(newText);\n                    tokens[tokens.length - 1] = newToken;\n                    raw = raw.substring(0, raw.length - oldToken.raw.length) + newToken.raw;\n                    text = text.substring(0, text.length - oldToken.text.length) + newToken.text;\n                    break;\n                }\n                else if (lastToken?.type === 'list') {\n                    // include continuation in nested list\n                    const oldToken = lastToken;\n                    const newText = oldToken.raw + '\\n' + lines.join('\\n');\n                    const newToken = this.list(newText);\n                    tokens[tokens.length - 1] = newToken;\n                    raw = raw.substring(0, raw.length - lastToken.raw.length) + newToken.raw;\n                    text = text.substring(0, text.length - oldToken.raw.length) + newToken.raw;\n                    lines = newText.substring(tokens.at(-1).raw.length).split('\\n');\n                    continue;\n                }\n            }\n            return {\n                type: 'blockquote',\n                raw,\n                tokens,\n                text,\n            };\n        }\n    }\n    list(src) {\n        let cap = this.rules.block.list.exec(src);\n        if (cap) {\n            let bull = cap[1].trim();\n            const isordered = bull.length > 1;\n            const list = {\n                type: 'list',\n                raw: '',\n                ordered: isordered,\n                start: isordered ? +bull.slice(0, -1) : '',\n                loose: false,\n                items: [],\n            };\n            bull = isordered ? `\\\\d{1,9}\\\\${bull.slice(-1)}` : `\\\\${bull}`;\n            if (this.options.pedantic) {\n                bull = isordered ? bull : '[*+-]';\n            }\n            // Get next list item\n            const itemRegex = this.rules.other.listItemRegex(bull);\n            let endsWithBlankLine = false;\n            // Check if current bullet point can start a new List Item\n            while (src) {\n                let endEarly = false;\n                let raw = '';\n                let itemContents = '';\n                if (!(cap = itemRegex.exec(src))) {\n                    break;\n                }\n                if (this.rules.block.hr.test(src)) { // End list if bullet was actually HR (possibly move into itemRegex?)\n                    break;\n                }\n                raw = cap[0];\n                src = src.substring(raw.length);\n                let line = cap[2].split('\\n', 1)[0].replace(this.rules.other.listReplaceTabs, (t) => ' '.repeat(3 * t.length));\n                let nextLine = src.split('\\n', 1)[0];\n                let blankLine = !line.trim();\n                let indent = 0;\n                if (this.options.pedantic) {\n                    indent = 2;\n                    itemContents = line.trimStart();\n                }\n                else if (blankLine) {\n                    indent = cap[1].length + 1;\n                }\n                else {\n                    indent = cap[2].search(this.rules.other.nonSpaceChar); // Find first non-space char\n                    indent = indent > 4 ? 1 : indent; // Treat indented code blocks (> 4 spaces) as having only 1 indent\n                    itemContents = line.slice(indent);\n                    indent += cap[1].length;\n                }\n                if (blankLine && this.rules.other.blankLine.test(nextLine)) { // Items begin with at most one blank line\n                    raw += nextLine + '\\n';\n                    src = src.substring(nextLine.length + 1);\n                    endEarly = true;\n                }\n                if (!endEarly) {\n                    const nextBulletRegex = this.rules.other.nextBulletRegex(indent);\n                    const hrRegex = this.rules.other.hrRegex(indent);\n                    const fencesBeginRegex = this.rules.other.fencesBeginRegex(indent);\n                    const headingBeginRegex = this.rules.other.headingBeginRegex(indent);\n                    const htmlBeginRegex = this.rules.other.htmlBeginRegex(indent);\n                    // Check if following lines should be included in List Item\n                    while (src) {\n                        const rawLine = src.split('\\n', 1)[0];\n                        let nextLineWithoutTabs;\n                        nextLine = rawLine;\n                        // Re-align to follow commonmark nesting rules\n                        if (this.options.pedantic) {\n                            nextLine = nextLine.replace(this.rules.other.listReplaceNesting, '  ');\n                            nextLineWithoutTabs = nextLine;\n                        }\n                        else {\n                            nextLineWithoutTabs = nextLine.replace(this.rules.other.tabCharGlobal, '    ');\n                        }\n                        // End list item if found code fences\n                        if (fencesBeginRegex.test(nextLine)) {\n                            break;\n                        }\n                        // End list item if found start of new heading\n                        if (headingBeginRegex.test(nextLine)) {\n                            break;\n                        }\n                        // End list item if found start of html block\n                        if (htmlBeginRegex.test(nextLine)) {\n                            break;\n                        }\n                        // End list item if found start of new bullet\n                        if (nextBulletRegex.test(nextLine)) {\n                            break;\n                        }\n                        // Horizontal rule found\n                        if (hrRegex.test(nextLine)) {\n                            break;\n                        }\n                        if (nextLineWithoutTabs.search(this.rules.other.nonSpaceChar) >= indent || !nextLine.trim()) { // Dedent if possible\n                            itemContents += '\\n' + nextLineWithoutTabs.slice(indent);\n                        }\n                        else {\n                            // not enough indentation\n                            if (blankLine) {\n                                break;\n                            }\n                            // paragraph continuation unless last line was a different block level element\n                            if (line.replace(this.rules.other.tabCharGlobal, '    ').search(this.rules.other.nonSpaceChar) >= 4) { // indented code block\n                                break;\n                            }\n                            if (fencesBeginRegex.test(line)) {\n                                break;\n                            }\n                            if (headingBeginRegex.test(line)) {\n                                break;\n                            }\n                            if (hrRegex.test(line)) {\n                                break;\n                            }\n                            itemContents += '\\n' + nextLine;\n                        }\n                        if (!blankLine && !nextLine.trim()) { // Check if current line is blank\n                            blankLine = true;\n                        }\n                        raw += rawLine + '\\n';\n                        src = src.substring(rawLine.length + 1);\n                        line = nextLineWithoutTabs.slice(indent);\n                    }\n                }\n                if (!list.loose) {\n                    // If the previous item ended with a blank line, the list is loose\n                    if (endsWithBlankLine) {\n                        list.loose = true;\n                    }\n                    else if (this.rules.other.doubleBlankLine.test(raw)) {\n                        endsWithBlankLine = true;\n                    }\n                }\n                let istask = null;\n                let ischecked;\n                // Check for task list items\n                if (this.options.gfm) {\n                    istask = this.rules.other.listIsTask.exec(itemContents);\n                    if (istask) {\n                        ischecked = istask[0] !== '[ ] ';\n                        itemContents = itemContents.replace(this.rules.other.listReplaceTask, '');\n                    }\n                }\n                list.items.push({\n                    type: 'list_item',\n                    raw,\n                    task: !!istask,\n                    checked: ischecked,\n                    loose: false,\n                    text: itemContents,\n                    tokens: [],\n                });\n                list.raw += raw;\n            }\n            // Do not consume newlines at end of final item. Alternatively, make itemRegex *start* with any newlines to simplify/speed up endsWithBlankLine logic\n            const lastItem = list.items.at(-1);\n            if (lastItem) {\n                lastItem.raw = lastItem.raw.trimEnd();\n                lastItem.text = lastItem.text.trimEnd();\n            }\n            else {\n                // not a list since there were no items\n                return;\n            }\n            list.raw = list.raw.trimEnd();\n            // Item child tokens handled here at end because we needed to have the final item to trim it first\n            for (let i = 0; i < list.items.length; i++) {\n                this.lexer.state.top = false;\n                list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);\n                if (!list.loose) {\n                    // Check if list should be loose\n                    const spacers = list.items[i].tokens.filter(t => t.type === 'space');\n                    const hasMultipleLineBreaks = spacers.length > 0 && spacers.some(t => this.rules.other.anyLine.test(t.raw));\n                    list.loose = hasMultipleLineBreaks;\n                }\n            }\n            // Set all items to loose if list is loose\n            if (list.loose) {\n                for (let i = 0; i < list.items.length; i++) {\n                    list.items[i].loose = true;\n                }\n            }\n            return list;\n        }\n    }\n    html(src) {\n        const cap = this.rules.block.html.exec(src);\n        if (cap) {\n            const token = {\n                type: 'html',\n                block: true,\n                raw: cap[0],\n                pre: cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style',\n                text: cap[0],\n            };\n            return token;\n        }\n    }\n    def(src) {\n        const cap = this.rules.block.def.exec(src);\n        if (cap) {\n            const tag = cap[1].toLowerCase().replace(this.rules.other.multipleSpaceGlobal, ' ');\n            const href = cap[2] ? cap[2].replace(this.rules.other.hrefBrackets, '$1').replace(this.rules.inline.anyPunctuation, '$1') : '';\n            const title = cap[3] ? cap[3].substring(1, cap[3].length - 1).replace(this.rules.inline.anyPunctuation, '$1') : cap[3];\n            return {\n                type: 'def',\n                tag,\n                raw: cap[0],\n                href,\n                title,\n            };\n        }\n    }\n    table(src) {\n        const cap = this.rules.block.table.exec(src);\n        if (!cap) {\n            return;\n        }\n        if (!this.rules.other.tableDelimiter.test(cap[2])) {\n            // delimiter row must have a pipe (|) or colon (:) otherwise it is a setext heading\n            return;\n        }\n        const headers = splitCells(cap[1]);\n        const aligns = cap[2].replace(this.rules.other.tableAlignChars, '').split('|');\n        const rows = cap[3]?.trim() ? cap[3].replace(this.rules.other.tableRowBlankLine, '').split('\\n') : [];\n        const item = {\n            type: 'table',\n            raw: cap[0],\n            header: [],\n            align: [],\n            rows: [],\n        };\n        if (headers.length !== aligns.length) {\n            // header and align columns must be equal, rows can be different.\n            return;\n        }\n        for (const align of aligns) {\n            if (this.rules.other.tableAlignRight.test(align)) {\n                item.align.push('right');\n            }\n            else if (this.rules.other.tableAlignCenter.test(align)) {\n                item.align.push('center');\n            }\n            else if (this.rules.other.tableAlignLeft.test(align)) {\n                item.align.push('left');\n            }\n            else {\n                item.align.push(null);\n            }\n        }\n        for (let i = 0; i < headers.length; i++) {\n            item.header.push({\n                text: headers[i],\n                tokens: this.lexer.inline(headers[i]),\n                header: true,\n                align: item.align[i],\n            });\n        }\n        for (const row of rows) {\n            item.rows.push(splitCells(row, item.header.length).map((cell, i) => {\n                return {\n                    text: cell,\n                    tokens: this.lexer.inline(cell),\n                    header: false,\n                    align: item.align[i],\n                };\n            }));\n        }\n        return item;\n    }\n    lheading(src) {\n        const cap = this.rules.block.lheading.exec(src);\n        if (cap) {\n            return {\n                type: 'heading',\n                raw: cap[0],\n                depth: cap[2].charAt(0) === '=' ? 1 : 2,\n                text: cap[1],\n                tokens: this.lexer.inline(cap[1]),\n            };\n        }\n    }\n    paragraph(src) {\n        const cap = this.rules.block.paragraph.exec(src);\n        if (cap) {\n            const text = cap[1].charAt(cap[1].length - 1) === '\\n'\n                ? cap[1].slice(0, -1)\n                : cap[1];\n            return {\n                type: 'paragraph',\n                raw: cap[0],\n                text,\n                tokens: this.lexer.inline(text),\n            };\n        }\n    }\n    text(src) {\n        const cap = this.rules.block.text.exec(src);\n        if (cap) {\n            return {\n                type: 'text',\n                raw: cap[0],\n                text: cap[0],\n                tokens: this.lexer.inline(cap[0]),\n            };\n        }\n    }\n    escape(src) {\n        const cap = this.rules.inline.escape.exec(src);\n        if (cap) {\n            return {\n                type: 'escape',\n                raw: cap[0],\n                text: cap[1],\n            };\n        }\n    }\n    tag(src) {\n        const cap = this.rules.inline.tag.exec(src);\n        if (cap) {\n            if (!this.lexer.state.inLink && this.rules.other.startATag.test(cap[0])) {\n                this.lexer.state.inLink = true;\n            }\n            else if (this.lexer.state.inLink && this.rules.other.endATag.test(cap[0])) {\n                this.lexer.state.inLink = false;\n            }\n            if (!this.lexer.state.inRawBlock && this.rules.other.startPreScriptTag.test(cap[0])) {\n                this.lexer.state.inRawBlock = true;\n            }\n            else if (this.lexer.state.inRawBlock && this.rules.other.endPreScriptTag.test(cap[0])) {\n                this.lexer.state.inRawBlock = false;\n            }\n            return {\n                type: 'html',\n                raw: cap[0],\n                inLink: this.lexer.state.inLink,\n                inRawBlock: this.lexer.state.inRawBlock,\n                block: false,\n                text: cap[0],\n            };\n        }\n    }\n    link(src) {\n        const cap = this.rules.inline.link.exec(src);\n        if (cap) {\n            const trimmedUrl = cap[2].trim();\n            if (!this.options.pedantic && this.rules.other.startAngleBracket.test(trimmedUrl)) {\n                // commonmark requires matching angle brackets\n                if (!(this.rules.other.endAngleBracket.test(trimmedUrl))) {\n                    return;\n                }\n                // ending angle bracket cannot be escaped\n                const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), '\\\\');\n                if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {\n                    return;\n                }\n            }\n            else {\n                // find closing parenthesis\n                const lastParenIndex = findClosingBracket(cap[2], '()');\n                if (lastParenIndex === -2) {\n                    // more open parens than closed\n                    return;\n                }\n                if (lastParenIndex > -1) {\n                    const start = cap[0].indexOf('!') === 0 ? 5 : 4;\n                    const linkLen = start + cap[1].length + lastParenIndex;\n                    cap[2] = cap[2].substring(0, lastParenIndex);\n                    cap[0] = cap[0].substring(0, linkLen).trim();\n                    cap[3] = '';\n                }\n            }\n            let href = cap[2];\n            let title = '';\n            if (this.options.pedantic) {\n                // split pedantic href and title\n                const link = this.rules.other.pedanticHrefTitle.exec(href);\n                if (link) {\n                    href = link[1];\n                    title = link[3];\n                }\n            }\n            else {\n                title = cap[3] ? cap[3].slice(1, -1) : '';\n            }\n            href = href.trim();\n            if (this.rules.other.startAngleBracket.test(href)) {\n                if (this.options.pedantic && !(this.rules.other.endAngleBracket.test(trimmedUrl))) {\n                    // pedantic allows starting angle bracket without ending angle bracket\n                    href = href.slice(1);\n                }\n                else {\n                    href = href.slice(1, -1);\n                }\n            }\n            return outputLink(cap, {\n                href: href ? href.replace(this.rules.inline.anyPunctuation, '$1') : href,\n                title: title ? title.replace(this.rules.inline.anyPunctuation, '$1') : title,\n            }, cap[0], this.lexer, this.rules);\n        }\n    }\n    reflink(src, links) {\n        let cap;\n        if ((cap = this.rules.inline.reflink.exec(src))\n            || (cap = this.rules.inline.nolink.exec(src))) {\n            const linkString = (cap[2] || cap[1]).replace(this.rules.other.multipleSpaceGlobal, ' ');\n            const link = links[linkString.toLowerCase()];\n            if (!link) {\n                const text = cap[0].charAt(0);\n                return {\n                    type: 'text',\n                    raw: text,\n                    text,\n                };\n            }\n            return outputLink(cap, link, cap[0], this.lexer, this.rules);\n        }\n    }\n    emStrong(src, maskedSrc, prevChar = '') {\n        let match = this.rules.inline.emStrongLDelim.exec(src);\n        if (!match)\n            return;\n        // _ can't be between two alphanumerics. \\p{L}\\p{N} includes non-english alphabet/numbers as well\n        if (match[3] && prevChar.match(this.rules.other.unicodeAlphaNumeric))\n            return;\n        const nextChar = match[1] || match[2] || '';\n        if (!nextChar || !prevChar || this.rules.inline.punctuation.exec(prevChar)) {\n            // unicode Regex counts emoji as 1 char; spread into array for proper count (used multiple times below)\n            const lLength = [...match[0]].length - 1;\n            let rDelim, rLength, delimTotal = lLength, midDelimTotal = 0;\n            const endReg = match[0][0] === '*' ? this.rules.inline.emStrongRDelimAst : this.rules.inline.emStrongRDelimUnd;\n            endReg.lastIndex = 0;\n            // Clip maskedSrc to same section of string as src (move to lexer?)\n            maskedSrc = maskedSrc.slice(-1 * src.length + lLength);\n            while ((match = endReg.exec(maskedSrc)) != null) {\n                rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];\n                if (!rDelim)\n                    continue; // skip single * in __abc*abc__\n                rLength = [...rDelim].length;\n                if (match[3] || match[4]) { // found another Left Delim\n                    delimTotal += rLength;\n                    continue;\n                }\n                else if (match[5] || match[6]) { // either Left or Right Delim\n                    if (lLength % 3 && !((lLength + rLength) % 3)) {\n                        midDelimTotal += rLength;\n                        continue; // CommonMark Emphasis Rules 9-10\n                    }\n                }\n                delimTotal -= rLength;\n                if (delimTotal > 0)\n                    continue; // Haven't found enough closing delimiters\n                // Remove extra characters. *a*** -> *a*\n                rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);\n                // char length can be >1 for unicode characters;\n                const lastCharLength = [...match[0]][0].length;\n                const raw = src.slice(0, lLength + match.index + lastCharLength + rLength);\n                // Create `em` if smallest delimiter has odd char count. *a***\n                if (Math.min(lLength, rLength) % 2) {\n                    const text = raw.slice(1, -1);\n                    return {\n                        type: 'em',\n                        raw,\n                        text,\n                        tokens: this.lexer.inlineTokens(text),\n                    };\n                }\n                // Create 'strong' if smallest delimiter has even char count. **a***\n                const text = raw.slice(2, -2);\n                return {\n                    type: 'strong',\n                    raw,\n                    text,\n                    tokens: this.lexer.inlineTokens(text),\n                };\n            }\n        }\n    }\n    codespan(src) {\n        const cap = this.rules.inline.code.exec(src);\n        if (cap) {\n            let text = cap[2].replace(this.rules.other.newLineCharGlobal, ' ');\n            const hasNonSpaceChars = this.rules.other.nonSpaceChar.test(text);\n            const hasSpaceCharsOnBothEnds = this.rules.other.startingSpaceChar.test(text) && this.rules.other.endingSpaceChar.test(text);\n            if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {\n                text = text.substring(1, text.length - 1);\n            }\n            return {\n                type: 'codespan',\n                raw: cap[0],\n                text,\n            };\n        }\n    }\n    br(src) {\n        const cap = this.rules.inline.br.exec(src);\n        if (cap) {\n            return {\n                type: 'br',\n                raw: cap[0],\n            };\n        }\n    }\n    del(src) {\n        const cap = this.rules.inline.del.exec(src);\n        if (cap) {\n            return {\n                type: 'del',\n                raw: cap[0],\n                text: cap[2],\n                tokens: this.lexer.inlineTokens(cap[2]),\n            };\n        }\n    }\n    autolink(src) {\n        const cap = this.rules.inline.autolink.exec(src);\n        if (cap) {\n            let text, href;\n            if (cap[2] === '@') {\n                text = cap[1];\n                href = 'mailto:' + text;\n            }\n            else {\n                text = cap[1];\n                href = text;\n            }\n            return {\n                type: 'link',\n                raw: cap[0],\n                text,\n                href,\n                tokens: [\n                    {\n                        type: 'text',\n                        raw: text,\n                        text,\n                    },\n                ],\n            };\n        }\n    }\n    url(src) {\n        let cap;\n        if (cap = this.rules.inline.url.exec(src)) {\n            let text, href;\n            if (cap[2] === '@') {\n                text = cap[0];\n                href = 'mailto:' + text;\n            }\n            else {\n                // do extended autolink path validation\n                let prevCapZero;\n                do {\n                    prevCapZero = cap[0];\n                    cap[0] = this.rules.inline._backpedal.exec(cap[0])?.[0] ?? '';\n                } while (prevCapZero !== cap[0]);\n                text = cap[0];\n                if (cap[1] === 'www.') {\n                    href = 'http://' + cap[0];\n                }\n                else {\n                    href = cap[0];\n                }\n            }\n            return {\n                type: 'link',\n                raw: cap[0],\n                text,\n                href,\n                tokens: [\n                    {\n                        type: 'text',\n                        raw: text,\n                        text,\n                    },\n                ],\n            };\n        }\n    }\n    inlineText(src) {\n        const cap = this.rules.inline.text.exec(src);\n        if (cap) {\n            const escaped = this.lexer.state.inRawBlock;\n            return {\n                type: 'text',\n                raw: cap[0],\n                text: cap[0],\n                escaped,\n            };\n        }\n    }\n}\n","import { _Tokenizer } from './Tokenizer.ts';\nimport { _defaults } from './defaults.ts';\nimport { other, block, inline } from './rules.ts';\n/**\n * Block Lexer\n */\nexport class _Lexer {\n    tokens;\n    options;\n    state;\n    tokenizer;\n    inlineQueue;\n    constructor(options) {\n        // TokenList cannot be created in one go\n        this.tokens = [];\n        this.tokens.links = Object.create(null);\n        this.options = options || _defaults;\n        this.options.tokenizer = this.options.tokenizer || new _Tokenizer();\n        this.tokenizer = this.options.tokenizer;\n        this.tokenizer.options = this.options;\n        this.tokenizer.lexer = this;\n        this.inlineQueue = [];\n        this.state = {\n            inLink: false,\n            inRawBlock: false,\n            top: true,\n        };\n        const rules = {\n            other,\n            block: block.normal,\n            inline: inline.normal,\n        };\n        if (this.options.pedantic) {\n            rules.block = block.pedantic;\n            rules.inline = inline.pedantic;\n        }\n        else if (this.options.gfm) {\n            rules.block = block.gfm;\n            if (this.options.breaks) {\n                rules.inline = inline.breaks;\n            }\n            else {\n                rules.inline = inline.gfm;\n            }\n        }\n        this.tokenizer.rules = rules;\n    }\n    /**\n     * Expose Rules\n     */\n    static get rules() {\n        return {\n            block,\n            inline,\n        };\n    }\n    /**\n     * Static Lex Method\n     */\n    static lex(src, options) {\n        const lexer = new _Lexer(options);\n        return lexer.lex(src);\n    }\n    /**\n     * Static Lex Inline Method\n     */\n    static lexInline(src, options) {\n        const lexer = new _Lexer(options);\n        return lexer.inlineTokens(src);\n    }\n    /**\n     * Preprocessing\n     */\n    lex(src) {\n        src = src.replace(other.carriageReturn, '\\n');\n        this.blockTokens(src, this.tokens);\n        for (let i = 0; i < this.inlineQueue.length; i++) {\n            const next = this.inlineQueue[i];\n            this.inlineTokens(next.src, next.tokens);\n        }\n        this.inlineQueue = [];\n        return this.tokens;\n    }\n    blockTokens(src, tokens = [], lastParagraphClipped = false) {\n        if (this.options.pedantic) {\n            src = src.replace(other.tabCharGlobal, '    ').replace(other.spaceLine, '');\n        }\n        while (src) {\n            let token;\n            if (this.options.extensions?.block?.some((extTokenizer) => {\n                if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n                    src = src.substring(token.raw.length);\n                    tokens.push(token);\n                    return true;\n                }\n                return false;\n            })) {\n                continue;\n            }\n            // newline\n            if (token = this.tokenizer.space(src)) {\n                src = src.substring(token.raw.length);\n                const lastToken = tokens.at(-1);\n                if (token.raw.length === 1 && lastToken !== undefined) {\n                    // if there's a single \\n as a spacer, it's terminating the last line,\n                    // so move it there so that we don't get unnecessary paragraph tags\n                    lastToken.raw += '\\n';\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // code\n            if (token = this.tokenizer.code(src)) {\n                src = src.substring(token.raw.length);\n                const lastToken = tokens.at(-1);\n                // An indented code block cannot interrupt a paragraph.\n                if (lastToken?.type === 'paragraph' || lastToken?.type === 'text') {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue.at(-1).src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // fences\n            if (token = this.tokenizer.fences(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // heading\n            if (token = this.tokenizer.heading(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // hr\n            if (token = this.tokenizer.hr(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // blockquote\n            if (token = this.tokenizer.blockquote(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // list\n            if (token = this.tokenizer.list(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // html\n            if (token = this.tokenizer.html(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // def\n            if (token = this.tokenizer.def(src)) {\n                src = src.substring(token.raw.length);\n                const lastToken = tokens.at(-1);\n                if (lastToken?.type === 'paragraph' || lastToken?.type === 'text') {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.raw;\n                    this.inlineQueue.at(-1).src = lastToken.text;\n                }\n                else if (!this.tokens.links[token.tag]) {\n                    this.tokens.links[token.tag] = {\n                        href: token.href,\n                        title: token.title,\n                    };\n                }\n                continue;\n            }\n            // table (gfm)\n            if (token = this.tokenizer.table(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // lheading\n            if (token = this.tokenizer.lheading(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // top-level paragraph\n            // prevent paragraph consuming extensions by clipping 'src' to extension start\n            let cutSrc = src;\n            if (this.options.extensions?.startBlock) {\n                let startIndex = Infinity;\n                const tempSrc = src.slice(1);\n                let tempStart;\n                this.options.extensions.startBlock.forEach((getStartIndex) => {\n                    tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n                    if (typeof tempStart === 'number' && tempStart >= 0) {\n                        startIndex = Math.min(startIndex, tempStart);\n                    }\n                });\n                if (startIndex < Infinity && startIndex >= 0) {\n                    cutSrc = src.substring(0, startIndex + 1);\n                }\n            }\n            if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {\n                const lastToken = tokens.at(-1);\n                if (lastParagraphClipped && lastToken?.type === 'paragraph') {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue.pop();\n                    this.inlineQueue.at(-1).src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                lastParagraphClipped = cutSrc.length !== src.length;\n                src = src.substring(token.raw.length);\n                continue;\n            }\n            // text\n            if (token = this.tokenizer.text(src)) {\n                src = src.substring(token.raw.length);\n                const lastToken = tokens.at(-1);\n                if (lastToken?.type === 'text') {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue.pop();\n                    this.inlineQueue.at(-1).src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            if (src) {\n                const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n                if (this.options.silent) {\n                    console.error(errMsg);\n                    break;\n                }\n                else {\n                    throw new Error(errMsg);\n                }\n            }\n        }\n        this.state.top = true;\n        return tokens;\n    }\n    inline(src, tokens = []) {\n        this.inlineQueue.push({ src, tokens });\n        return tokens;\n    }\n    /**\n     * Lexing/Compiling\n     */\n    inlineTokens(src, tokens = []) {\n        // String with links masked to avoid interference with em and strong\n        let maskedSrc = src;\n        let match = null;\n        // Mask out reflinks\n        if (this.tokens.links) {\n            const links = Object.keys(this.tokens.links);\n            if (links.length > 0) {\n                while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {\n                    if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) {\n                        maskedSrc = maskedSrc.slice(0, match.index)\n                            + '[' + 'a'.repeat(match[0].length - 2) + ']'\n                            + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);\n                    }\n                }\n            }\n        }\n        // Mask out escaped characters\n        while ((match = this.tokenizer.rules.inline.anyPunctuation.exec(maskedSrc)) != null) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.anyPunctuation.lastIndex);\n        }\n        // Mask out other blocks\n        while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\n        }\n        let keepPrevChar = false;\n        let prevChar = '';\n        while (src) {\n            if (!keepPrevChar) {\n                prevChar = '';\n            }\n            keepPrevChar = false;\n            let token;\n            // extensions\n            if (this.options.extensions?.inline?.some((extTokenizer) => {\n                if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n                    src = src.substring(token.raw.length);\n                    tokens.push(token);\n                    return true;\n                }\n                return false;\n            })) {\n                continue;\n            }\n            // escape\n            if (token = this.tokenizer.escape(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // tag\n            if (token = this.tokenizer.tag(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // link\n            if (token = this.tokenizer.link(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // reflink, nolink\n            if (token = this.tokenizer.reflink(src, this.tokens.links)) {\n                src = src.substring(token.raw.length);\n                const lastToken = tokens.at(-1);\n                if (token.type === 'text' && lastToken?.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // em & strong\n            if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // code\n            if (token = this.tokenizer.codespan(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // br\n            if (token = this.tokenizer.br(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // del (gfm)\n            if (token = this.tokenizer.del(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // autolink\n            if (token = this.tokenizer.autolink(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // url (gfm)\n            if (!this.state.inLink && (token = this.tokenizer.url(src))) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // text\n            // prevent inlineText consuming extensions by clipping 'src' to extension start\n            let cutSrc = src;\n            if (this.options.extensions?.startInline) {\n                let startIndex = Infinity;\n                const tempSrc = src.slice(1);\n                let tempStart;\n                this.options.extensions.startInline.forEach((getStartIndex) => {\n                    tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n                    if (typeof tempStart === 'number' && tempStart >= 0) {\n                        startIndex = Math.min(startIndex, tempStart);\n                    }\n                });\n                if (startIndex < Infinity && startIndex >= 0) {\n                    cutSrc = src.substring(0, startIndex + 1);\n                }\n            }\n            if (token = this.tokenizer.inlineText(cutSrc)) {\n                src = src.substring(token.raw.length);\n                if (token.raw.slice(-1) !== '_') { // Track prevChar before string of ____ started\n                    prevChar = token.raw.slice(-1);\n                }\n                keepPrevChar = true;\n                const lastToken = tokens.at(-1);\n                if (lastToken?.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            if (src) {\n                const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n                if (this.options.silent) {\n                    console.error(errMsg);\n                    break;\n                }\n                else {\n                    throw new Error(errMsg);\n                }\n            }\n        }\n        return tokens;\n    }\n}\n","import { _defaults } from './defaults.ts';\nimport { cleanUrl, escape, } from './helpers.ts';\nimport { other } from './rules.ts';\n/**\n * Renderer\n */\nexport class _Renderer {\n    options;\n    parser; // set by the parser\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    space(token) {\n        return '';\n    }\n    code({ text, lang, escaped }) {\n        const langString = (lang || '').match(other.notSpaceStart)?.[0];\n        const code = text.replace(other.endingNewline, '') + '\\n';\n        if (!langString) {\n            return '<pre><code>'\n                + (escaped ? code : escape(code, true))\n                + '</code></pre>\\n';\n        }\n        return '<pre><code class=\"language-'\n            + escape(langString)\n            + '\">'\n            + (escaped ? code : escape(code, true))\n            + '</code></pre>\\n';\n    }\n    blockquote({ tokens }) {\n        const body = this.parser.parse(tokens);\n        return `<blockquote>\\n${body}</blockquote>\\n`;\n    }\n    html({ text }) {\n        return text;\n    }\n    heading({ tokens, depth }) {\n        return `<h${depth}>${this.parser.parseInline(tokens)}</h${depth}>\\n`;\n    }\n    hr(token) {\n        return '<hr>\\n';\n    }\n    list(token) {\n        const ordered = token.ordered;\n        const start = token.start;\n        let body = '';\n        for (let j = 0; j < token.items.length; j++) {\n            const item = token.items[j];\n            body += this.listitem(item);\n        }\n        const type = ordered ? 'ol' : 'ul';\n        const startAttr = (ordered && start !== 1) ? (' start=\"' + start + '\"') : '';\n        return '<' + type + startAttr + '>\\n' + body + '</' + type + '>\\n';\n    }\n    listitem(item) {\n        let itemBody = '';\n        if (item.task) {\n            const checkbox = this.checkbox({ checked: !!item.checked });\n            if (item.loose) {\n                if (item.tokens[0]?.type === 'paragraph') {\n                    item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\n                    if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\n                        item.tokens[0].tokens[0].text = checkbox + ' ' + escape(item.tokens[0].tokens[0].text);\n                        item.tokens[0].tokens[0].escaped = true;\n                    }\n                }\n                else {\n                    item.tokens.unshift({\n                        type: 'text',\n                        raw: checkbox + ' ',\n                        text: checkbox + ' ',\n                        escaped: true,\n                    });\n                }\n            }\n            else {\n                itemBody += checkbox + ' ';\n            }\n        }\n        itemBody += this.parser.parse(item.tokens, !!item.loose);\n        return `<li>${itemBody}</li>\\n`;\n    }\n    checkbox({ checked }) {\n        return '<input '\n            + (checked ? 'checked=\"\" ' : '')\n            + 'disabled=\"\" type=\"checkbox\">';\n    }\n    paragraph({ tokens }) {\n        return `<p>${this.parser.parseInline(tokens)}</p>\\n`;\n    }\n    table(token) {\n        let header = '';\n        // header\n        let cell = '';\n        for (let j = 0; j < token.header.length; j++) {\n            cell += this.tablecell(token.header[j]);\n        }\n        header += this.tablerow({ text: cell });\n        let body = '';\n        for (let j = 0; j < token.rows.length; j++) {\n            const row = token.rows[j];\n            cell = '';\n            for (let k = 0; k < row.length; k++) {\n                cell += this.tablecell(row[k]);\n            }\n            body += this.tablerow({ text: cell });\n        }\n        if (body)\n            body = `<tbody>${body}</tbody>`;\n        return '<table>\\n'\n            + '<thead>\\n'\n            + header\n            + '</thead>\\n'\n            + body\n            + '</table>\\n';\n    }\n    tablerow({ text }) {\n        return `<tr>\\n${text}</tr>\\n`;\n    }\n    tablecell(token) {\n        const content = this.parser.parseInline(token.tokens);\n        const type = token.header ? 'th' : 'td';\n        const tag = token.align\n            ? `<${type} align=\"${token.align}\">`\n            : `<${type}>`;\n        return tag + content + `</${type}>\\n`;\n    }\n    /**\n     * span level renderer\n     */\n    strong({ tokens }) {\n        return `<strong>${this.parser.parseInline(tokens)}</strong>`;\n    }\n    em({ tokens }) {\n        return `<em>${this.parser.parseInline(tokens)}</em>`;\n    }\n    codespan({ text }) {\n        return `<code>${escape(text, true)}</code>`;\n    }\n    br(token) {\n        return '<br>';\n    }\n    del({ tokens }) {\n        return `<del>${this.parser.parseInline(tokens)}</del>`;\n    }\n    link({ href, title, tokens }) {\n        const text = this.parser.parseInline(tokens);\n        const cleanHref = cleanUrl(href);\n        if (cleanHref === null) {\n            return text;\n        }\n        href = cleanHref;\n        let out = '<a href=\"' + href + '\"';\n        if (title) {\n            out += ' title=\"' + (escape(title)) + '\"';\n        }\n        out += '>' + text + '</a>';\n        return out;\n    }\n    image({ href, title, text, tokens }) {\n        if (tokens) {\n            text = this.parser.parseInline(tokens, this.parser.textRenderer);\n        }\n        const cleanHref = cleanUrl(href);\n        if (cleanHref === null) {\n            return escape(text);\n        }\n        href = cleanHref;\n        let out = `<img src=\"${href}\" alt=\"${text}\"`;\n        if (title) {\n            out += ` title=\"${escape(title)}\"`;\n        }\n        out += '>';\n        return out;\n    }\n    text(token) {\n        return 'tokens' in token && token.tokens\n            ? this.parser.parseInline(token.tokens)\n            : ('escaped' in token && token.escaped ? token.text : escape(token.text));\n    }\n}\n","/**\n * TextRenderer\n * returns only the textual part of the token\n */\nexport class _TextRenderer {\n    // no need for block level renderers\n    strong({ text }) {\n        return text;\n    }\n    em({ text }) {\n        return text;\n    }\n    codespan({ text }) {\n        return text;\n    }\n    del({ text }) {\n        return text;\n    }\n    html({ text }) {\n        return text;\n    }\n    text({ text }) {\n        return text;\n    }\n    link({ text }) {\n        return '' + text;\n    }\n    image({ text }) {\n        return '' + text;\n    }\n    br() {\n        return '';\n    }\n}\n","import { _Renderer } from './Renderer.ts';\nimport { _TextRenderer } from './TextRenderer.ts';\nimport { _defaults } from './defaults.ts';\n/**\n * Parsing & Compiling\n */\nexport class _Parser {\n    options;\n    renderer;\n    textRenderer;\n    constructor(options) {\n        this.options = options || _defaults;\n        this.options.renderer = this.options.renderer || new _Renderer();\n        this.renderer = this.options.renderer;\n        this.renderer.options = this.options;\n        this.renderer.parser = this;\n        this.textRenderer = new _TextRenderer();\n    }\n    /**\n     * Static Parse Method\n     */\n    static parse(tokens, options) {\n        const parser = new _Parser(options);\n        return parser.parse(tokens);\n    }\n    /**\n     * Static Parse Inline Method\n     */\n    static parseInline(tokens, options) {\n        const parser = new _Parser(options);\n        return parser.parseInline(tokens);\n    }\n    /**\n     * Parse Loop\n     */\n    parse(tokens, top = true) {\n        let out = '';\n        for (let i = 0; i < tokens.length; i++) {\n            const anyToken = tokens[i];\n            // Run any renderer extensions\n            if (this.options.extensions?.renderers?.[anyToken.type]) {\n                const genericToken = anyToken;\n                const ret = this.options.extensions.renderers[genericToken.type].call({ parser: this }, genericToken);\n                if (ret !== false || !['space', 'hr', 'heading', 'code', 'table', 'blockquote', 'list', 'html', 'paragraph', 'text'].includes(genericToken.type)) {\n                    out += ret || '';\n                    continue;\n                }\n            }\n            const token = anyToken;\n            switch (token.type) {\n                case 'space': {\n                    out += this.renderer.space(token);\n                    continue;\n                }\n                case 'hr': {\n                    out += this.renderer.hr(token);\n                    continue;\n                }\n                case 'heading': {\n                    out += this.renderer.heading(token);\n                    continue;\n                }\n                case 'code': {\n                    out += this.renderer.code(token);\n                    continue;\n                }\n                case 'table': {\n                    out += this.renderer.table(token);\n                    continue;\n                }\n                case 'blockquote': {\n                    out += this.renderer.blockquote(token);\n                    continue;\n                }\n                case 'list': {\n                    out += this.renderer.list(token);\n                    continue;\n                }\n                case 'html': {\n                    out += this.renderer.html(token);\n                    continue;\n                }\n                case 'paragraph': {\n                    out += this.renderer.paragraph(token);\n                    continue;\n                }\n                case 'text': {\n                    let textToken = token;\n                    let body = this.renderer.text(textToken);\n                    while (i + 1 < tokens.length && tokens[i + 1].type === 'text') {\n                        textToken = tokens[++i];\n                        body += '\\n' + this.renderer.text(textToken);\n                    }\n                    if (top) {\n                        out += this.renderer.paragraph({\n                            type: 'paragraph',\n                            raw: body,\n                            text: body,\n                            tokens: [{ type: 'text', raw: body, text: body, escaped: true }],\n                        });\n                    }\n                    else {\n                        out += body;\n                    }\n                    continue;\n                }\n                default: {\n                    const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n                    if (this.options.silent) {\n                        console.error(errMsg);\n                        return '';\n                    }\n                    else {\n                        throw new Error(errMsg);\n                    }\n                }\n            }\n        }\n        return out;\n    }\n    /**\n     * Parse Inline Tokens\n     */\n    parseInline(tokens, renderer = this.renderer) {\n        let out = '';\n        for (let i = 0; i < tokens.length; i++) {\n            const anyToken = tokens[i];\n            // Run any renderer extensions\n            if (this.options.extensions?.renderers?.[anyToken.type]) {\n                const ret = this.options.extensions.renderers[anyToken.type].call({ parser: this }, anyToken);\n                if (ret !== false || !['escape', 'html', 'link', 'image', 'strong', 'em', 'codespan', 'br', 'del', 'text'].includes(anyToken.type)) {\n                    out += ret || '';\n                    continue;\n                }\n            }\n            const token = anyToken;\n            switch (token.type) {\n                case 'escape': {\n                    out += renderer.text(token);\n                    break;\n                }\n                case 'html': {\n                    out += renderer.html(token);\n                    break;\n                }\n                case 'link': {\n                    out += renderer.link(token);\n                    break;\n                }\n                case 'image': {\n                    out += renderer.image(token);\n                    break;\n                }\n                case 'strong': {\n                    out += renderer.strong(token);\n                    break;\n                }\n                case 'em': {\n                    out += renderer.em(token);\n                    break;\n                }\n                case 'codespan': {\n                    out += renderer.codespan(token);\n                    break;\n                }\n                case 'br': {\n                    out += renderer.br(token);\n                    break;\n                }\n                case 'del': {\n                    out += renderer.del(token);\n                    break;\n                }\n                case 'text': {\n                    out += renderer.text(token);\n                    break;\n                }\n                default: {\n                    const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n                    if (this.options.silent) {\n                        console.error(errMsg);\n                        return '';\n                    }\n                    else {\n                        throw new Error(errMsg);\n                    }\n                }\n            }\n        }\n        return out;\n    }\n}\n","import { _defaults } from './defaults.ts';\nimport { _Lexer } from './Lexer.ts';\nimport { _Parser } from './Parser.ts';\nexport class _Hooks {\n    options;\n    block;\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    static passThroughHooks = new Set([\n        'preprocess',\n        'postprocess',\n        'processAllTokens',\n    ]);\n    /**\n     * Process markdown before marked\n     */\n    preprocess(markdown) {\n        return markdown;\n    }\n    /**\n     * Process HTML after marked is finished\n     */\n    postprocess(html) {\n        return html;\n    }\n    /**\n     * Process all tokens before walk tokens\n     */\n    processAllTokens(tokens) {\n        return tokens;\n    }\n    /**\n     * Provide function to tokenize markdown\n     */\n    provideLexer() {\n        return this.block ? _Lexer.lex : _Lexer.lexInline;\n    }\n    /**\n     * Provide function to parse tokens\n     */\n    provideParser() {\n        return this.block ? _Parser.parse : _Parser.parseInline;\n    }\n}\n","import { _getDefaults } from './defaults.ts';\nimport { _Lexer } from './Lexer.ts';\nimport { _Parser } from './Parser.ts';\nimport { _Hooks } from './Hooks.ts';\nimport { _Renderer } from './Renderer.ts';\nimport { _Tokenizer } from './Tokenizer.ts';\nimport { _TextRenderer } from './TextRenderer.ts';\nimport { escape } from './helpers.ts';\nexport class Marked {\n    defaults = _getDefaults();\n    options = this.setOptions;\n    parse = this.parseMarkdown(true);\n    parseInline = this.parseMarkdown(false);\n    Parser = _Parser;\n    Renderer = _Renderer;\n    TextRenderer = _TextRenderer;\n    Lexer = _Lexer;\n    Tokenizer = _Tokenizer;\n    Hooks = _Hooks;\n    constructor(...args) {\n        this.use(...args);\n    }\n    /**\n     * Run callback for every token\n     */\n    walkTokens(tokens, callback) {\n        let values = [];\n        for (const token of tokens) {\n            values = values.concat(callback.call(this, token));\n            switch (token.type) {\n                case 'table': {\n                    const tableToken = token;\n                    for (const cell of tableToken.header) {\n                        values = values.concat(this.walkTokens(cell.tokens, callback));\n                    }\n                    for (const row of tableToken.rows) {\n                        for (const cell of row) {\n                            values = values.concat(this.walkTokens(cell.tokens, callback));\n                        }\n                    }\n                    break;\n                }\n                case 'list': {\n                    const listToken = token;\n                    values = values.concat(this.walkTokens(listToken.items, callback));\n                    break;\n                }\n                default: {\n                    const genericToken = token;\n                    if (this.defaults.extensions?.childTokens?.[genericToken.type]) {\n                        this.defaults.extensions.childTokens[genericToken.type].forEach((childTokens) => {\n                            const tokens = genericToken[childTokens].flat(Infinity);\n                            values = values.concat(this.walkTokens(tokens, callback));\n                        });\n                    }\n                    else if (genericToken.tokens) {\n                        values = values.concat(this.walkTokens(genericToken.tokens, callback));\n                    }\n                }\n            }\n        }\n        return values;\n    }\n    use(...args) {\n        const extensions = this.defaults.extensions || { renderers: {}, childTokens: {} };\n        args.forEach((pack) => {\n            // copy options to new object\n            const opts = { ...pack };\n            // set async to true if it was set to true before\n            opts.async = this.defaults.async || opts.async || false;\n            // ==-- Parse \"addon\" extensions --== //\n            if (pack.extensions) {\n                pack.extensions.forEach((ext) => {\n                    if (!ext.name) {\n                        throw new Error('extension name required');\n                    }\n                    if ('renderer' in ext) { // Renderer extensions\n                        const prevRenderer = extensions.renderers[ext.name];\n                        if (prevRenderer) {\n                            // Replace extension with func to run new extension but fall back if false\n                            extensions.renderers[ext.name] = function (...args) {\n                                let ret = ext.renderer.apply(this, args);\n                                if (ret === false) {\n                                    ret = prevRenderer.apply(this, args);\n                                }\n                                return ret;\n                            };\n                        }\n                        else {\n                            extensions.renderers[ext.name] = ext.renderer;\n                        }\n                    }\n                    if ('tokenizer' in ext) { // Tokenizer Extensions\n                        if (!ext.level || (ext.level !== 'block' && ext.level !== 'inline')) {\n                            throw new Error(\"extension level must be 'block' or 'inline'\");\n                        }\n                        const extLevel = extensions[ext.level];\n                        if (extLevel) {\n                            extLevel.unshift(ext.tokenizer);\n                        }\n                        else {\n                            extensions[ext.level] = [ext.tokenizer];\n                        }\n                        if (ext.start) { // Function to check for start of token\n                            if (ext.level === 'block') {\n                                if (extensions.startBlock) {\n                                    extensions.startBlock.push(ext.start);\n                                }\n                                else {\n                                    extensions.startBlock = [ext.start];\n                                }\n                            }\n                            else if (ext.level === 'inline') {\n                                if (extensions.startInline) {\n                                    extensions.startInline.push(ext.start);\n                                }\n                                else {\n                                    extensions.startInline = [ext.start];\n                                }\n                            }\n                        }\n                    }\n                    if ('childTokens' in ext && ext.childTokens) { // Child tokens to be visited by walkTokens\n                        extensions.childTokens[ext.name] = ext.childTokens;\n                    }\n                });\n                opts.extensions = extensions;\n            }\n            // ==-- Parse \"overwrite\" extensions --== //\n            if (pack.renderer) {\n                const renderer = this.defaults.renderer || new _Renderer(this.defaults);\n                for (const prop in pack.renderer) {\n                    if (!(prop in renderer)) {\n                        throw new Error(`renderer '${prop}' does not exist`);\n                    }\n                    if (['options', 'parser'].includes(prop)) {\n                        // ignore options property\n                        continue;\n                    }\n                    const rendererProp = prop;\n                    const rendererFunc = pack.renderer[rendererProp];\n                    const prevRenderer = renderer[rendererProp];\n                    // Replace renderer with func to run extension, but fall back if false\n                    renderer[rendererProp] = (...args) => {\n                        let ret = rendererFunc.apply(renderer, args);\n                        if (ret === false) {\n                            ret = prevRenderer.apply(renderer, args);\n                        }\n                        return ret || '';\n                    };\n                }\n                opts.renderer = renderer;\n            }\n            if (pack.tokenizer) {\n                const tokenizer = this.defaults.tokenizer || new _Tokenizer(this.defaults);\n                for (const prop in pack.tokenizer) {\n                    if (!(prop in tokenizer)) {\n                        throw new Error(`tokenizer '${prop}' does not exist`);\n                    }\n                    if (['options', 'rules', 'lexer'].includes(prop)) {\n                        // ignore options, rules, and lexer properties\n                        continue;\n                    }\n                    const tokenizerProp = prop;\n                    const tokenizerFunc = pack.tokenizer[tokenizerProp];\n                    const prevTokenizer = tokenizer[tokenizerProp];\n                    // Replace tokenizer with func to run extension, but fall back if false\n                    // @ts-expect-error cannot type tokenizer function dynamically\n                    tokenizer[tokenizerProp] = (...args) => {\n                        let ret = tokenizerFunc.apply(tokenizer, args);\n                        if (ret === false) {\n                            ret = prevTokenizer.apply(tokenizer, args);\n                        }\n                        return ret;\n                    };\n                }\n                opts.tokenizer = tokenizer;\n            }\n            // ==-- Parse Hooks extensions --== //\n            if (pack.hooks) {\n                const hooks = this.defaults.hooks || new _Hooks();\n                for (const prop in pack.hooks) {\n                    if (!(prop in hooks)) {\n                        throw new Error(`hook '${prop}' does not exist`);\n                    }\n                    if (['options', 'block'].includes(prop)) {\n                        // ignore options and block properties\n                        continue;\n                    }\n                    const hooksProp = prop;\n                    const hooksFunc = pack.hooks[hooksProp];\n                    const prevHook = hooks[hooksProp];\n                    if (_Hooks.passThroughHooks.has(prop)) {\n                        // @ts-expect-error cannot type hook function dynamically\n                        hooks[hooksProp] = (arg) => {\n                            if (this.defaults.async) {\n                                return Promise.resolve(hooksFunc.call(hooks, arg)).then(ret => {\n                                    return prevHook.call(hooks, ret);\n                                });\n                            }\n                            const ret = hooksFunc.call(hooks, arg);\n                            return prevHook.call(hooks, ret);\n                        };\n                    }\n                    else {\n                        // @ts-expect-error cannot type hook function dynamically\n                        hooks[hooksProp] = (...args) => {\n                            let ret = hooksFunc.apply(hooks, args);\n                            if (ret === false) {\n                                ret = prevHook.apply(hooks, args);\n                            }\n                            return ret;\n                        };\n                    }\n                }\n                opts.hooks = hooks;\n            }\n            // ==-- Parse WalkTokens extensions --== //\n            if (pack.walkTokens) {\n                const walkTokens = this.defaults.walkTokens;\n                const packWalktokens = pack.walkTokens;\n                opts.walkTokens = function (token) {\n                    let values = [];\n                    values.push(packWalktokens.call(this, token));\n                    if (walkTokens) {\n                        values = values.concat(walkTokens.call(this, token));\n                    }\n                    return values;\n                };\n            }\n            this.defaults = { ...this.defaults, ...opts };\n        });\n        return this;\n    }\n    setOptions(opt) {\n        this.defaults = { ...this.defaults, ...opt };\n        return this;\n    }\n    lexer(src, options) {\n        return _Lexer.lex(src, options ?? this.defaults);\n    }\n    parser(tokens, options) {\n        return _Parser.parse(tokens, options ?? this.defaults);\n    }\n    parseMarkdown(blockType) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const parse = (src, options) => {\n            const origOpt = { ...options };\n            const opt = { ...this.defaults, ...origOpt };\n            const throwError = this.onError(!!opt.silent, !!opt.async);\n            // throw error if an extension set async to true but parse was called with async: false\n            if (this.defaults.async === true && origOpt.async === false) {\n                return throwError(new Error('marked(): The async option was set to true by an extension. Remove async: false from the parse options object to return a Promise.'));\n            }\n            // throw error in case of non string input\n            if (typeof src === 'undefined' || src === null) {\n                return throwError(new Error('marked(): input parameter is undefined or null'));\n            }\n            if (typeof src !== 'string') {\n                return throwError(new Error('marked(): input parameter is of type '\n                    + Object.prototype.toString.call(src) + ', string expected'));\n            }\n            if (opt.hooks) {\n                opt.hooks.options = opt;\n                opt.hooks.block = blockType;\n            }\n            const lexer = opt.hooks ? opt.hooks.provideLexer() : (blockType ? _Lexer.lex : _Lexer.lexInline);\n            const parser = opt.hooks ? opt.hooks.provideParser() : (blockType ? _Parser.parse : _Parser.parseInline);\n            if (opt.async) {\n                return Promise.resolve(opt.hooks ? opt.hooks.preprocess(src) : src)\n                    .then(src => lexer(src, opt))\n                    .then(tokens => opt.hooks ? opt.hooks.processAllTokens(tokens) : tokens)\n                    .then(tokens => opt.walkTokens ? Promise.all(this.walkTokens(tokens, opt.walkTokens)).then(() => tokens) : tokens)\n                    .then(tokens => parser(tokens, opt))\n                    .then(html => opt.hooks ? opt.hooks.postprocess(html) : html)\n                    .catch(throwError);\n            }\n            try {\n                if (opt.hooks) {\n                    src = opt.hooks.preprocess(src);\n                }\n                let tokens = lexer(src, opt);\n                if (opt.hooks) {\n                    tokens = opt.hooks.processAllTokens(tokens);\n                }\n                if (opt.walkTokens) {\n                    this.walkTokens(tokens, opt.walkTokens);\n                }\n                let html = parser(tokens, opt);\n                if (opt.hooks) {\n                    html = opt.hooks.postprocess(html);\n                }\n                return html;\n            }\n            catch (e) {\n                return throwError(e);\n            }\n        };\n        return parse;\n    }\n    onError(silent, async) {\n        return (e) => {\n            e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n            if (silent) {\n                const msg = '<p>An error occurred:</p><pre>'\n                    + escape(e.message + '', true)\n                    + '</pre>';\n                if (async) {\n                    return Promise.resolve(msg);\n                }\n                return msg;\n            }\n            if (async) {\n                return Promise.reject(e);\n            }\n            throw e;\n        };\n    }\n}\n","import { _Lexer } from './Lexer.ts';\nimport { _Parser } from './Parser.ts';\nimport { _Tokenizer } from './Tokenizer.ts';\nimport { _Renderer } from './Renderer.ts';\nimport { _TextRenderer } from './TextRenderer.ts';\nimport { _Hooks } from './Hooks.ts';\nimport { Marked } from './Instance.ts';\nimport { _getDefaults, changeDefaults, _defaults, } from './defaults.ts';\nconst markedInstance = new Marked();\nexport function marked(src, opt) {\n    return markedInstance.parse(src, opt);\n}\n/**\n * Sets the default options.\n *\n * @param options Hash of options\n */\nmarked.options =\n    marked.setOptions = function (options) {\n        markedInstance.setOptions(options);\n        marked.defaults = markedInstance.defaults;\n        changeDefaults(marked.defaults);\n        return marked;\n    };\n/**\n * Gets the original marked default options.\n */\nmarked.getDefaults = _getDefaults;\nmarked.defaults = _defaults;\n/**\n * Use Extension\n */\nmarked.use = function (...args) {\n    markedInstance.use(...args);\n    marked.defaults = markedInstance.defaults;\n    changeDefaults(marked.defaults);\n    return marked;\n};\n/**\n * Run callback for every token\n */\nmarked.walkTokens = function (tokens, callback) {\n    return markedInstance.walkTokens(tokens, callback);\n};\n/**\n * Compiles markdown to HTML without enclosing `p` tag.\n *\n * @param src String of markdown source to be compiled\n * @param options Hash of options\n * @return String of compiled HTML\n */\nmarked.parseInline = markedInstance.parseInline;\n/**\n * Expose\n */\nmarked.Parser = _Parser;\nmarked.parser = _Parser.parse;\nmarked.Renderer = _Renderer;\nmarked.TextRenderer = _TextRenderer;\nmarked.Lexer = _Lexer;\nmarked.lexer = _Lexer.lex;\nmarked.Tokenizer = _Tokenizer;\nmarked.Hooks = _Hooks;\nmarked.parse = marked;\nexport const options = marked.options;\nexport const setOptions = marked.setOptions;\nexport const use = marked.use;\nexport const walkTokens = marked.walkTokens;\nexport const parseInline = marked.parseInline;\nexport const parse = marked;\nexport const parser = _Parser.parse;\nexport const lexer = _Lexer.lex;\nexport { _defaults as defaults, _getDefaults as getDefaults } from './defaults.ts';\nexport { _Lexer as Lexer } from './Lexer.ts';\nexport { _Parser as Parser } from './Parser.ts';\nexport { _Tokenizer as Tokenizer } from './Tokenizer.ts';\nexport { _Renderer as Renderer } from './Renderer.ts';\nexport { _TextRenderer as TextRenderer } from './TextRenderer.ts';\nexport { _Hooks as Hooks } from './Hooks.ts';\nexport { Marked } from './Instance.ts';\n"],"names":["_defaults","escape"],"version":3,"file":"ollama-frontend.3c14d121.js.map","sourceRoot":"/__parcel_source_root/"}